#!/usr/local/bin/perl
#
#      $Id: build_doc,v 1.1 1995-06-06 18:12:00 haley Exp $
#
#########################################################################
#                                                                       #
#              Copyright (C)  1995                                      #
#        University Corporation for Atmospheric Research                #
#              All Rights Reserved                                      #
#                                                                       #
#########################################################################
#
#	File:		build_doc
#
#	Author:		John Clyne
#			National Center for Atmospheric Research
#			PO 3000, Boulder, Colorado
#
#	Date:		Tue Jun  6 11:14:21 MDT 1995
#
#	Description:	generate an NCAR G documentation tar file
#
#	Usage:		build_doc [-debug] [-root <root>]
#
#	Environment:	NCARG	path to NCAR G documentation
#
#	Files:
#
#
#	Options:
#			-root <root>	Use 'root' as the directory root
#					for the build. The default is
#					to use /cyclone/ncargd/dist/binaries
#
#

sub	disk_space {
	local($space_file, $root_dir, @dirs) = @_;

	local($dir, $file, $size, $total);


	open(FP, ">$space_file") || die "Can't open file <$space_file>: $!\n";

	print FP <<"EOF";
#
#                       Disk Space Requirements
#
#       This file is generated automatically and stores the software
#       installation size requirements for listed directories. The 
#		sizes are given in Kbytes.
#

EOF

	foreach $dir (@dirs) {
		open(PIPE, "find $root_dir/$dir -print |");
		$total = 0;
		while ($file = <PIPE>) {
			chop $file;
			$size = -s $file;
			$total += $size;
		}
		$total = ($total / 1024) + 1;
		printf FP "$dir\t\t%d\n", $total;
		close(PIPE);
	}

	close(FP);

}
	
sub	create_tars {
	local($system, $build_dir, $version, @dirs) = @_;

	local($cmd, $dir, $tar, $DIR, $format);

	$format = "/bin/tar cbf 20 %s %s";

	foreach $dir (@dirs) {
		$DIR = $dir;
		$DIR =~ tr/[a-z]/[A-Z]/;
		$tar = sprintf($format, "../$DIR.TAR", ".");
		$cmd = "cd $build_dir/$dir; $tar";
		system($cmd);
		if ($? != 0) {
			print "\"$cmd\" exited with error\n";
			print "Terminating build session\n";
			exit 1;
		}
	}
}

sub	vgen {
	local($build_dir, $version) = @_;

	local($file) = "$build_dir/version";
	open(FP, ">$file") || die "Can't open file <$file>: $!\n";

	print FP "$version\n";

	close(FP);
}

sub	sigint_handler {
	local ($sig) = @_;

	print STDOUT "Caught a SIG$sig -- shutting down\n";
	do CloseConfig();
	exit 1;
}
	

require 'config.pl';

##########################################################################
##
##      M A I N   P R O G R A M
##
##########################################################################


#
#       Global vars
#
$progName = $& if ($0 =~ /\w+$/);
$doDebug = 0;				# do operate in debug mode
$buildDirRoot = "/cyclone/ncargd/dist/binaries";	# default build repository
$Version; 				# NCAR G version number
$sizesFile; 				# path to size requirements file
$install_dir = "INSTALL";       # where the INSTALL script lives
$doc_dir = "doc";             # documentation directory

$SIG{'INT'} = 'sigint_handler';

while ($ARGV[0] =~ /-/) {
        $_ = shift @ARGV;

        if (/-debug/) {
		$doDebug = 1;
        }
        elsif (/-root/) {
		$buildDirRoot = shift @ARGV;
        }
	else {
		print STDERR "Usage: $progName [-debug] [-root <root>]\n";
		print STDERR "Terminating build session\n";
		exit 1;
	}
}

if (@ARGV) {
	print STDERR "Usage: $progName [-debug] [-root <root>]\n";
	print STDERR "Terminating build session\n";
	exit 1;
}

select(STDERR); $| = 1;         # make unbuffered

print "Beginning documentation build session.\n";
#
# NCARG points to root of NCARG source
#
if (! defined ($ncarg = $ENV{'NCARG'})) {
	print STDERR "NCARG environment variable not set\n";
	print STDERR "Terminating build session\n";
	exit 1;
}

#
#	paths to files we'll either create or access
#
$sizesFile = "sizes";
$Version = `cat $ncarg/version`;
chop $Version;

#
# 	verify everything looks correct before we begin
#
print STDOUT "Building version $Version documentation.\n";
print STDOUT "Is this correct [y/n](y) ? ";
$_ = <STDIN>;
chop;
if ( ! (/^y/ || /^Y/ || $_ eq "") ) {
	print "Terminating documentation build session\n";
	exit 1;
}


for ($done=0; $done==0; ) {
	print STDOUT "\n\nCreate tar files in $buildDirRoot\n";
	print STDOUT "Press <RETURN>  for default, new directory, or q(quit) > ";

	$_ = <STDIN>;
	chop;
	if (/^q/ || /^Q/) {
		print "Terminating documentation build session\n";
		exit 1;
	}
	if (/^\./) {
		print STDERR "\n<$_> is not an absolute path name\n";
	}
	elsif ($_ eq "") {
		$done = 1;
	}
	else {
		$buildDirRoot = $_;
	}
}

#
# $build_dir is  the directory where the documentation will be
# temporarily installed and where the tar files created by 'build_doc'
# will be deposited.
#
$build_dir = "$buildDirRoot" . "/$doc_dir";

if (! -d $build_dir ) {
	system("mkdir $build_dir");
}

if (! (-d $build_dir && -w $build_dir)) {
	print "$build_dir is not writable or does not exist\n";
	print "Terminating build session\n";
	exit 1;
}


#
#	Calculate the disk space required for the directories ps
#   and html
#	
#
@dirs = ("html", "ps");		# all the installed dirs
do disk_space("$build_dir/$sizesFile", $build_dir, "html","ps");

#
#	tar up the installables
#
do create_tars($sys_type, $build_dir, $Version, "html","ps");


#
#	generate the version file
#
do vgen($build_dir, $Version);

if (! $doDebug) {
	$cmd = "cd $build_dir; /bin/rm -r html ps";
	system($cmd);
}

do CloseConfig();

print "Completed tarring up documentation\n";

exit 0;
