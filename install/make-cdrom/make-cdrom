#!/usr/local/bin/perl 
#
#      $Id: make-cdrom,v 1.12 1996-08-21 14:57:13 haley Exp $
#
#########################################################################
#									#
#			   Copyright (C)  1993				#
#	     University Corporation for Atmospheric Research		#
#			   All Rights Reserved				#
#									#
#########################################################################
#
#	File:		make-cdrom
#
#	Author:		John Clyne
#			National Center for Atmospheric Research
#			PO 3000, Boulder, Colorado
#
#	Date:		Tue Mar 16 20:24:07 MST 1993
#
#	Description:	Write an NCAR G binary distribution cdrom tarfile
#			to tape.
#
#	Usage:		make-cdrom 	[-debug] 
#					[-root <directory>]
#					[-inter] 
#					[-device <device>] 
#					[-rhost <rhost>] 
#					[-save] 
#					[-<arch>]
#
#	Environment:
#
#	Files:		
#		$build_root		: root of ncarg build directory 
#					(currently /fs/scd/home1/ncargd/dist/binaries)
#		$build_root/TOC		: table of contents describing what
#				  	should be put on the tape.
#		$build_root/INSTALL/INSTALL.TAR	: install script
#
#		$build_root/$arch/{BIN,INC,LIB,MAN}.TAR	: distribution tar files
#
#
#	Options:	-debug			: print tape writing commands 
#						  and exit.
#			-root <directory>	: root of ncarg build directory
#						  default is /fs/scd/home1/ncargd/dist/binaries
#			-inter			: interactive mode - prompt 
#						  for platforms
#			-device <device>	: tape device
#			-rhost <rhost>		: remote host 
#			-save 			: Don't remove scratch dir
#			-arch <arch>		: platforms to include.
#
#	globals
#
#
#
#
#
#
#
$doDebug = 0;
$do_src = 0;		# do we record the distribution src to cd-rom
$do_doc = 0;		# do we record the distribution doc to cd-rom


#
#	map system names into ISO 9660 legal names
#
%archMap= (
	'HPUX_HP9000_7xx',	'HPUX_7XX',
	'AIX_RS6000',		'AIX_R6K',
	'SunOS_sun4',		'SUNOS_S4',
	'Solaris_sun4',		'SOLARIS',
	'ULTRIX_RISC',		'ULTRIX',
	'OSF1_alpha',		'OSF1_ALF',
	'IRIX_IP',		'IRIX_IP',
	'IRIX64_IP',		'IRIX64',
	'UNICOS_YMP',		'UCOS_YMP',
	'src',			'UNUSED',
	'doc',			'UNUSED'
);

@Archs = keys %archMap;



#
#	execute a command via system(). If $doDebug is set just print the 
#	command
#
sub	my_system {
	local ($cmd) = @_;

	if ($doDebug) {
		print STDERR "$cmd\n";
	}
	else {
		system ($cmd);
		if ($? != 0) {
			print "\"$cmd\" exited with error\n";
			do cleanup(1);
		}
	}
}

sub	cleanup {
	local ($ec) = @_;

#	if (! defined (@saveScratch)) {
#		do my_system("/bin/rm $scratch_dir");
#	}

	exit $ec;
}

sub     sigint_handler {
        local ($sig) = @_;

        print STDOUT "Caught a SIG$sig -- shutting down\n";
	
	do cleanup(1);
}


#
#	tar a directory out to tape using the tar -h option to follow symlinks.
#
sub	tarit {
	local ($rsh, $nrdevice, $path) = @_;

	local($cmd);

	$cmd = "cd $path; tar -cfbh - 32 . | $rsh dd bs=16384 of=$nrdevice";
	do my_system ($cmd);

}



sub	get_archs {
	local($interactive) = @_;


	local($i, @select, @list);


	if (! $interactive) {
		return(@Archs);
	}

	$done = 0;
	while (! $done) {

	system ("clear");
	print "\n\n\nSelect the numbered item(s) from the following list\n";
	print "(Multiple item numbers should be separated by spaces): \n\n\n";


	for ($i=1; $i<=@Archs; $i++) {
		print "\t$i.  $Archs[$i - 1]\n";
	}
	print "\n\t$i.  All of the above\n";
	$all = $i;
	print "\n\t0.  Exit without writing tape\n";
	print "\n\n\n\tChoice(s) : ";

	$_ = <STDIN>;
	chop;

	@list = split(/ /,$_);
	undef @select;
	while (@list) {
		$_ = shift @list;
		if ($_ > $all  || $_ < 0) {
			print "Invalid selection <$_>\n";
		}
		elsif ($_ == 0) {
			print "Terminating \n";
			do cleanup(1);
		}
		elsif ($_ == $all) {
			@select = @Archs;
		}
		else {
			@select = split(' ',join(' ',@select, $Archs[$_ - 1]));
		}
	}

	print "\n\nYou have selected the following systems:\n\n";

	@list = @select;	
	while (@list) {
		$_ = shift @list;
		print "\t$_\n";
	}
	print "\nIs this correct [y/n]? ";

	$_ = <STDIN>;
	chop;
	if ($_ eq "y" || $_ eq "Y") {
		$done = 1;
	}

	}

	return(@select);

}


##
##
##	M A I N
##
##


$device = "/dev/rst0";		# tape device
$nrdevice = "/dev/nrst0";		# no-rewind tape device
$rhost = "dillon";		# remote tapedrive host

$do_inter = 0;			# do interactive mode?
$build_root = "/fs/scd/home1/ncargd/dist/binaries";	
$install_dir = "INSTALL";
$rsh;				# remote shell command (undefine if local)
@archs;				# architectures to write binaries for
$index = 0;			# index for toc
$scratch_dir = "/tmp/make-cdrom.$$";	# scratch directory.
$usage = "[-debug] [-root <path>] [-inter] [-device <device>] [-rhost <rhost>] [-save]  [-<arch>]";


#
# Tar files we write for each requested architecture
# N.B. order is important
#
@tars = ("BIN.TAR", "INCLUDE.TAR", "LIB.TAR", "MAN.TAR");	

#
#	create a scratch directory
#
mkdir("$scratch_dir", 0777);	# don't check err code in case dir already exist
if (! -d $scratch_dir || ! -w $scratch_dir) {
	print STDERR "Can't create directory ($scratch_dir)\n";
	exit 1;
}


#
# register a signal handler to cleanup the scratch directory
#
$SIG{'INT'} = 'sigint_handler';


undef	@archs;
LOOP:
while ($ARGV[0] =~ /-/) {
        $_ = shift @ARGV;

        if (/-debug/) {
                $doDebug = 1;
        }
	elsif (/-i/) {
		$do_inter = 1;
	}
	elsif (/-rhost/) {
		$rhost = shift @ARGV;
	}
	elsif (/-device/) {
		$nrdevice = shift @ARGV;
	}
	elsif (/-root/) {
		$build_root = shift @ARGV;
	}
	elsif (/-save/) {
		$saveScratch = 1;
	}
	else {
		foreach $arch (@Archs) {
			if (/-$arch/) {
				@archs = split(' ',join(' ',@archs,"$arch"));
				next LOOP;
			}
		}
		print STDERR "Usage: make-cdrom $usage\n";
		do cleanup(1);
	}
}


if (@ARGV) {
        print STDERR "Usage: $make-cdrom [-debug]\n";
	do cleanup(1);
}

#
#	Must run as root or run into trouble when untaring tar file on
#	foreign machine.
#
$_ = `whoami`;
chop;
if ($_ ne "root" && ! $doDebug) {
	print STDERR "Permission denied: must be root\n";
	do cleanup(1);
}

#
# if archs weren't specified on the command line get them now
#
if (! defined (@archs)) {
	@archs = &get_archs($do_inter);
}

$do_src = grep(/^src$/, @archs);        # Do we record the src?
@archs = grep(!/^src$/, @archs);        # remove 'src' from @archs if exists

$do_doc = grep(/^doc/, @archs);        # Do we record the documentation?
@archs = grep(!/^doc/, @archs);        # remove 'doc' from @archs if exists

$rsh = "rsh $rhost" if (! ($rhost eq ""));

print "archs=@archs\n";
print "rhost=$rhost\n";
print "scratch_dir=$scratch_dir\n";
print "nrdevice=$nrdevice\n";
print "rhost=$rhost\n";
print "rsh=$rsh\n";

#
#	generate the tar file with the install script
#
$cmd = "cd $build_root/$install_dir; tar -cfb $scratch_dir/INSTALL.TAR 20 .";
do my_system("$cmd");

#
#	jam a symlink in pointing to the src tar file
#
if ($do_src) {
	$cmd = "ln -s $build_root/SRC.TAR $scratch_dir/SRC.TAR";
	do my_system($cmd);
}

#
#	jam a symlink in pointing to the doc tar file
#
if ($do_doc) {
	$cmd = "ln -s $build_root/DOC.TAR $scratch_dir/DOC.TAR";
	do my_system($cmd);
}

#
# put symlinks in the scratch directory pointing into the build dir for
# all the different architectures
#
foreach $arch (@archs) {
	$cd_arch = $archMap{$arch};
	$dir = "$scratch_dir/$cd_arch";
	mkdir("$dir", 0777) || die "mkdir ($dir, 0777) : $!\n";
	foreach $tar (@tars) {
		$cmd = "ln -s $build_root/$arch/$tar $dir/$tar";
		do my_system($cmd);
	}
}

print "Place tape in device and hit <RETURN> when ready. Ctrl-C to abort ";
$_ = <STDIN>;

sleep 10;	# be safe - wait for tape to mount



#
#	write the tar install script tar file
#
print "\n\nWriting contents of $scratch_dir to $rhost:$nrdevice...\n";
do tarit ($rsh, $nrdevice, "$scratch_dir");

do cleanup(0);

exit 0;
