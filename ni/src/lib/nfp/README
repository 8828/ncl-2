 Adding a Fortran routine as an NCL built-in:
 ------ - ------- ------- -- -- --- --------
 
   o  Add the routine to the nfpfort directory:

        $NCARG/ni/src/lib/nfpfort

      and do a "cvs add" on it.

      The routine should be a double precision version.
      Instead of coding a double precision version 
      directly it is less error prone to use 
      the NAG single to double precision converter.  This
      is on windom in /usr/local/NAGWare-4.1/bin/nag_apt .
      The default execution of nag_apt is to take a single
      precision .f file and convert it to double precision.
      The original file is backed up to a .orig file and 
      the input file is overwritten with the double precision
      version.

      If there is an underscore in the Fortran routine name, then
      g77 adds an extra underscore at the end of the name.  This
      can cause load problems unless care is taken to account for this.

      Avoiding underscores in the Fortran routine names is advisable.

   o  Add the function reference to the yMakefile in the nfpfort
      directory and do:

          cvs update 
          make me
          make

      to make libnfpfort.a .

      Test compilations on all test machines.  This is not necessary
      if you are super confident about the source. You can see a 
      list of test machines at

      https://www.ncl.ucar.edu/internal/ncl-dev/systems.shtml

   o  Go to directory $NCARG/ni/src/lib/nfp

   o  Create the "W" file that calls the Fortran.
 
        --> Be sure to prototype the Fortran function/subroutine.

        --> The "W" file may contain several functions or procedures
            and those names will have an "_W" after them.

   o  Add the prototype to wrapper.c in directory $NCARG/ni/src/lib/nfp.

   o  Add the registration to wrapper.c 

      Make sure the routine is properly registered as either a
      function or procedure.                          

      The registered NCL name will be the same as the "_W" name
      without the "_W".

   o  Add the "W" file name to the yMakefile.

   o  In the nfp directory do:

        cvs update
        make me
        make

   o  Go to $NCARG/ni/src/ncl and do

        cvs update
        make me
        make

      to make ncl for testing purposes.

   o  Add analysis test scripts to:

        ncargtest/nclscripts

   o  Add plotting test scripts to:

        ncargtest/nclscripts/plotting

   o  After testing is complete,
         +  Check in the original Fortran source in
            directory $NCARG/ni/src/lib/nfpfort
         +  Add and check in the test scripts in
            directory ncargtest/nclscripts.
         +  Add the "W" wrapper in directory
            $NCARG/ni/src/lib/nfp and check in
            wrapper.c, yMakefile, and the wrapper.

   o  Add NCL routine documentation to:

        webdoc/ncl/Document/Functions/Built-in

      Determine the version number of the release where the new
      routine will appear.  Add a newversion tag to the source like:

         <newversion>
         4.3.1
         </newversion>

      For details on the formatting of the .xml files, see:
 
        webdoc/ncl/Document/Functions/Built-in/README

      Add the new file names to the yMakefile
 
      To review the new documentation use

         webdoc/ncl/internal/about_website/updatetnclweb

      to create a .shtml file from the .xml and copy that 
      to the NCL test web site  http://test.www.ncl.ucar.edu/
      (note the "t" that distinguishes updatetnclweb from updatenclweb).

      You can then review the documentation at

  http://test.www.ncl.ucar.edu/Document/Functions/Built-in/new_routine.shtml

  
      where "new_routine" is the name of the NCL routine just added.

      When you are satisfied with the documentation, use
      updatenclweb to copy it to the live web site.

      Add and check in the new .xml files as well as the yMakefile.
      Do not check in .shtml files.

  o  Edit webdoc/ncl/future_release.xml to add the new stuff.

  o  If you want to add an Applications example that shows usage of
     the new routine, see

       webdoc/ncl/Applications/README

