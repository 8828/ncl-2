;--------------------------------------------------------------------------------
; This function convert input variable x to type specified by type.
; Wei Huang
; May 21, 2012
;--------------------------------------------------------------------------------

 undef("totype")
 function totype( varin, type:string )
 local varout

 begin
    ;printVarSummary(varin)
    ;print(type)

     ;Convert to float
     if(type .eq. "float") then
         varout = tofloat(varin)
         return(varout)
     end if

     ;Convert to double
     if(type .eq. "double") then
         varout = todouble(varin)
         return(varout)
     end if

     ;Convert to uint
     if(type .eq. "uint") then
         varout = touint(varin)
         return(varout)
     end if

    ;Convert to integer
     if(type .eq. "int" .or. type .eq. "integer") then
         varout = toint(varin)
         return(varout)
     end if

     ;Convert to char
     if(type .eq. "char" .or. type .eq. "character") then
         varout = tochar(varin)
         return(varout)
     end if

     ;Convert to byte
     if(type .eq. "byte") then
         varout = tobyte(varin)
         return(varout)
     end if

     ;Convert to short
     if(type .eq. "short") then
         varout = toshort(varin)
         return(varout)
     end if

     ;Convert to ushort
     if(type .eq. "ushort") then
         varout = toushort(varin)
         return(varout)
     end if

     ;Convert to long
     if(type .eq. "long") then
         varout = tolong(varin)
         return(varout)
     end if

     ;Convert to ulong
     if(type .eq. "ulong") then
         varout = toulong(varin)
         return(varout)
     end if

     ;Convert to int64
     if(type .eq. "int64") then
         varout = toint64(varin)
         return(varout)
     end if

     ;Convert to uint64
     if(type .eq. "uint64") then
         varout = touint64(varin)
         return(varout)
     end if

     ;Convert to string
     if(type .eq. "string") then
         varout = tostring(varin)
         return(varout)
     end if

     print("")
     print("WARNING:")
     print("CANNOT convert input variable type: <" + typeof(varin) + "> to type: <" + type + ">")
     print("The original type: <" + typeof(varin) + "> is returned.")
     print("")

     varout = varin
     return(varout)
 end

;***********************************************************************;
; These following nine xxxx_cmap() functions simply return the RGB
; triplets of the nine different builtin color maps:
;    cyclic
;    gscyclic
;    gsldtol
;    gsdltod
;    uniform
;    temp1
;    psgcap
;    example
;    ncl_default
;***********************************************************************;
undef("ncl_default_cmap")
function ncl_default_cmap()
begin
  return((/ \
    (/0.505882, 0.121569, 0.941176/),  \
    (/0.486275, 0.117647, 0.941176/),  \
    (/0.466667, 0.113725, 0.945098/),  \
    (/0.447059, 0.105882, 0.949020/),  \
    (/0.423529, 0.101961, 0.949020/),  \
    (/0.403922, 0.094118, 0.952941/),  \
    (/0.380392, 0.090196, 0.956863/),  \
    (/0.356863, 0.082353, 0.960784/),  \
    (/0.337255, 0.078431, 0.960784/),  \
    (/0.313726, 0.070588, 0.964706/),  \
    (/0.286275, 0.066667, 0.968627/),  \
    (/0.262745, 0.058824, 0.968627/),  \
    (/0.239216, 0.054902, 0.972549/),  \
    (/0.215686, 0.047059, 0.976471/),  \
    (/0.188235, 0.043137, 0.980392/),  \
    (/0.164706, 0.035294, 0.980392/),  \
    (/0.137255, 0.027451, 0.984314/),  \
    (/0.109804, 0.023529, 0.988235/),  \
    (/0.082353, 0.015686, 0.988235/),  \
    (/0.054902, 0.011765, 0.992157/),  \
    (/0.027451, 0.003922, 0.996078/),  \
    (/0.000000, 0.000000, 1.000000/),  \
    (/0.011765, 0.023529, 0.992157/),  \
    (/0.023529, 0.047059, 0.988235/),  \
    (/0.039216, 0.070588, 0.980392/),  \
    (/0.050980, 0.094118, 0.976471/),  \
    (/0.066667, 0.117647, 0.968627/),  \
    (/0.078431, 0.141176, 0.964706/),  \
    (/0.090196, 0.164706, 0.960784/),  \
    (/0.101961, 0.184314, 0.952941/),  \
    (/0.113725, 0.203922, 0.949020/),  \
    (/0.129412, 0.223529, 0.941176/),  \
    (/0.141176, 0.243137, 0.937255/),  \
    (/0.152941, 0.262745, 0.929412/),  \
    (/0.164706, 0.282353, 0.925490/),  \
    (/0.176471, 0.298039, 0.921569/),  \
    (/0.188235, 0.317647, 0.913725/),  \
    (/0.200000, 0.333333, 0.909804/),  \
    (/0.207843, 0.349020, 0.901961/),  \
    (/0.219608, 0.364706, 0.898039/),  \
    (/0.231373, 0.380392, 0.890196/),  \
    (/0.243137, 0.396078, 0.886275/),  \
    (/0.254902, 0.411765, 0.882353/),  \
    (/0.247059, 0.415686, 0.886275/),  \
    (/0.243137, 0.419608, 0.890196/),  \
    (/0.235294, 0.423529, 0.898039/),  \
    (/0.231373, 0.431373, 0.901961/),  \
    (/0.223529, 0.435294, 0.909804/),  \
    (/0.219608, 0.443137, 0.913725/),  \
    (/0.211765, 0.450980, 0.921569/),  \
    (/0.203922, 0.454902, 0.925490/),  \
    (/0.200000, 0.462745, 0.929412/),  \
    (/0.192157, 0.470588, 0.937255/),  \
    (/0.184314, 0.478431, 0.941176/),  \
    (/0.180392, 0.482353, 0.949020/),  \
    (/0.172549, 0.490196, 0.952941/),  \
    (/0.164706, 0.498039, 0.960784/),  \
    (/0.160784, 0.509804, 0.964706/),  \
    (/0.152941, 0.517647, 0.968627/),  \
    (/0.145098, 0.525490, 0.976471/),  \
    (/0.137255, 0.533333, 0.980392/),  \
    (/0.129412, 0.545098, 0.988235/),  \
    (/0.121569, 0.552941, 0.992157/),  \
    (/0.113725, 0.564706, 1.000000/),  \
    (/0.109804, 0.568627, 1.000000/),  \
    (/0.105882, 0.576471, 1.000000/),  \
    (/0.098039, 0.584314, 1.000000/),  \
    (/0.094118, 0.592157, 1.000000/),  \
    (/0.086275, 0.600000, 1.000000/),  \
    (/0.082353, 0.607843, 1.000000/),  \
    (/0.074510, 0.619608, 1.000000/),  \
    (/0.070588, 0.627451, 1.000000/),  \
    (/0.066667, 0.635294, 1.000000/),  \
    (/0.058824, 0.643137, 1.000000/),  \
    (/0.054902, 0.650980, 1.000000/),  \
    (/0.047059, 0.662745, 1.000000/),  \
    (/0.043137, 0.670588, 1.000000/),  \
    (/0.035294, 0.678431, 1.000000/),  \
    (/0.031373, 0.690196, 1.000000/),  \
    (/0.027451, 0.698039, 1.000000/),  \
    (/0.019608, 0.705882, 1.000000/),  \
    (/0.015686, 0.717647, 1.000000/),  \
    (/0.007843, 0.725490, 1.000000/),  \
    (/0.003922, 0.737255, 1.000000/),  \
    (/0.000000, 0.749020, 1.000000/),  \
    (/0.027451, 0.749020, 0.996078/),  \
    (/0.054902, 0.749020, 0.992157/),  \
    (/0.082353, 0.749020, 0.988235/),  \
    (/0.109804, 0.749020, 0.984314/),  \
    (/0.137255, 0.752941, 0.984314/),  \
    (/0.160784, 0.752941, 0.980392/),  \
    (/0.188235, 0.756863, 0.976471/),  \
    (/0.215686, 0.756863, 0.972549/),  \
    (/0.243137, 0.760784, 0.972549/),  \
    (/0.270588, 0.760784, 0.968627/),  \
    (/0.294118, 0.764706, 0.964706/),  \
    (/0.321569, 0.768627, 0.960784/),  \
    (/0.345098, 0.768627, 0.960784/),  \
    (/0.372549, 0.772549, 0.956863/),  \
    (/0.396078, 0.776471, 0.952941/),  \
    (/0.423529, 0.780392, 0.949020/),  \
    (/0.447059, 0.784314, 0.949020/),  \
    (/0.474510, 0.788235, 0.945098/),  \
    (/0.498039, 0.792157, 0.941176/),  \
    (/0.521569, 0.796078, 0.937255/),  \
    (/0.549020, 0.803922, 0.937255/),  \
    (/0.560784, 0.807843, 0.937255/),  \
    (/0.572549, 0.815686, 0.937255/),  \
    (/0.584314, 0.819608, 0.941176/),  \
    (/0.596078, 0.827451, 0.941176/),  \
    (/0.607843, 0.831373, 0.945098/),  \
    (/0.619608, 0.839216, 0.945098/),  \
    (/0.631373, 0.843137, 0.949020/),  \
    (/0.643137, 0.850980, 0.949020/),  \
    (/0.658824, 0.854902, 0.952941/),  \
    (/0.670588, 0.862745, 0.952941/),  \
    (/0.682353, 0.866667, 0.956863/),  \
    (/0.694118, 0.870588, 0.956863/),  \
    (/0.705882, 0.878431, 0.960784/),  \
    (/0.721569, 0.882353, 0.960784/),  \
    (/0.733333, 0.890196, 0.964706/),  \
    (/0.745098, 0.894118, 0.964706/),  \
    (/0.756863, 0.901961, 0.968627/),  \
    (/0.772549, 0.905882, 0.968627/),  \
    (/0.784314, 0.913725, 0.972549/),  \
    (/0.796078, 0.917647, 0.972549/),  \
    (/0.811765, 0.925490, 0.976471/),  \
    (/1.000000, 1.000000, 0.784314/),  \
    (/1.000000, 0.996078, 0.752941/),  \
    (/1.000000, 0.996078, 0.725490/),  \
    (/1.000000, 0.992157, 0.698039/),  \
    (/1.000000, 0.988235, 0.670588/),  \
    (/1.000000, 0.984314, 0.643137/),  \
    (/1.000000, 0.980392, 0.615686/),  \
    (/1.000000, 0.976471, 0.584314/),  \
    (/1.000000, 0.972549, 0.556863/),  \
    (/1.000000, 0.968627, 0.529412/),  \
    (/1.000000, 0.964706, 0.501961/),  \
    (/1.000000, 0.956863, 0.474510/),  \
    (/1.000000, 0.952941, 0.447059/),  \
    (/1.000000, 0.945098, 0.419608/),  \
    (/1.000000, 0.937255, 0.388235/),  \
    (/1.000000, 0.933333, 0.360784/),  \
    (/1.000000, 0.925490, 0.333333/),  \
    (/1.000000, 0.917647, 0.305882/),  \
    (/1.000000, 0.905882, 0.278431/),  \
    (/1.000000, 0.898039, 0.250980/),  \
    (/1.000000, 0.890196, 0.223529/),  \
    (/1.000000, 0.882353, 0.192157/),  \
    (/1.000000, 0.870588, 0.184314/),  \
    (/1.000000, 0.862745, 0.176471/),  \
    (/1.000000, 0.854902, 0.164706/),  \
    (/1.000000, 0.843137, 0.156863/),  \
    (/1.000000, 0.835294, 0.149020/),  \
    (/1.000000, 0.827451, 0.137255/),  \
    (/1.000000, 0.815686, 0.129412/),  \
    (/1.000000, 0.807843, 0.117647/),  \
    (/1.000000, 0.796078, 0.109804/),  \
    (/1.000000, 0.788235, 0.101961/),  \
    (/1.000000, 0.776471, 0.090196/),  \
    (/1.000000, 0.764706, 0.082353/),  \
    (/1.000000, 0.756863, 0.074510/),  \
    (/1.000000, 0.745098, 0.062745/),  \
    (/1.000000, 0.733333, 0.054902/),  \
    (/1.000000, 0.721569, 0.043137/),  \
    (/1.000000, 0.709804, 0.035294/),  \
    (/1.000000, 0.701961, 0.027451/),  \
    (/1.000000, 0.690196, 0.015686/),  \
    (/1.000000, 0.678431, 0.007843/),  \
    (/1.000000, 0.666667, 0.000000/),  \
    (/1.000000, 0.654902, 0.000000/),  \
    (/1.000000, 0.643137, 0.000000/),  \
    (/1.000000, 0.631373, 0.000000/),  \
    (/1.000000, 0.619608, 0.000000/),  \
    (/1.000000, 0.607843, 0.000000/),  \
    (/1.000000, 0.596078, 0.000000/),  \
    (/1.000000, 0.584314, 0.000000/),  \
    (/1.000000, 0.576471, 0.000000/),  \
    (/1.000000, 0.564706, 0.000000/),  \
    (/1.000000, 0.552941, 0.000000/),  \
    (/1.000000, 0.541176, 0.000000/),  \
    (/1.000000, 0.529412, 0.000000/),  \
    (/1.000000, 0.517647, 0.000000/),  \
    (/1.000000, 0.505882, 0.000000/),  \
    (/1.000000, 0.498039, 0.000000/),  \
    (/1.000000, 0.486275, 0.000000/),  \
    (/1.000000, 0.474510, 0.000000/),  \
    (/1.000000, 0.462745, 0.000000/),  \
    (/1.000000, 0.450980, 0.000000/),  \
    (/1.000000, 0.439216, 0.000000/),  \
    (/1.000000, 0.431373, 0.000000/),  \
    (/1.000000, 0.407843, 0.000000/),  \
    (/1.000000, 0.388235, 0.000000/),  \
    (/1.000000, 0.368627, 0.000000/),  \
    (/1.000000, 0.349020, 0.000000/),  \
    (/1.000000, 0.325490, 0.000000/),  \
    (/1.000000, 0.305882, 0.000000/),  \
    (/1.000000, 0.286275, 0.000000/),  \
    (/1.000000, 0.266667, 0.000000/),  \
    (/1.000000, 0.243137, 0.000000/),  \
    (/1.000000, 0.223529, 0.000000/),  \
    (/1.000000, 0.203922, 0.000000/),  \
    (/1.000000, 0.184314, 0.000000/),  \
    (/1.000000, 0.160784, 0.000000/),  \
    (/1.000000, 0.141176, 0.000000/),  \
    (/1.000000, 0.121569, 0.000000/),  \
    (/1.000000, 0.101961, 0.000000/),  \
    (/1.000000, 0.078431, 0.000000/),  \
    (/1.000000, 0.058824, 0.000000/),  \
    (/1.000000, 0.039216, 0.000000/),  \
    (/1.000000, 0.019608, 0.000000/),  \
    (/1.000000, 0.000000, 0.000000/),  \
    (/0.988235, 0.000000, 0.000000/),  \
    (/0.976471, 0.000000, 0.000000/),  \
    (/0.968627, 0.000000, 0.000000/),  \
    (/0.956863, 0.000000, 0.000000/),  \
    (/0.945098, 0.000000, 0.000000/),  \
    (/0.937255, 0.000000, 0.000000/),  \
    (/0.925490, 0.000000, 0.000000/),  \
    (/0.917647, 0.000000, 0.000000/),  \
    (/0.905882, 0.000000, 0.000000/),  \
    (/0.894118, 0.000000, 0.000000/),  \
    (/0.886275, 0.000000, 0.000000/),  \
    (/0.874510, 0.000000, 0.000000/),  \
    (/0.862745, 0.000000, 0.000000/),  \
    (/0.854902, 0.000000, 0.000000/),  \
    (/0.843137, 0.000000, 0.000000/),  \
    (/0.835294, 0.000000, 0.000000/),  \
    (/0.823529, 0.000000, 0.000000/),  \
    (/0.811765, 0.000000, 0.000000/),  \
    (/0.803922, 0.000000, 0.000000/),  \
    (/0.792157, 0.000000, 0.000000/),  \
    (/0.784314, 0.000000, 0.000000/),  \
    (/0.792157, 0.023529, 0.023529/),  \
    (/0.803922, 0.050980, 0.050980/),  \
    (/0.811765, 0.078431, 0.078431/),  \
    (/0.823529, 0.105882, 0.105882/),  \
    (/0.835294, 0.137255, 0.137255/),  \
    (/0.843137, 0.168627, 0.168627/),  \
    (/0.854902, 0.196078, 0.196078/),  \
    (/0.862745, 0.227451, 0.227451/),  \
    (/0.874510, 0.258824, 0.258824/),  \
    (/0.886275, 0.294118, 0.294118/),  \
    (/0.894118, 0.325490, 0.325490/),  \
    (/0.905882, 0.360784, 0.360784/),  \
    (/0.917647, 0.396078, 0.396078/),  \
    (/0.925490, 0.431373, 0.431373/),  \
    (/0.937255, 0.466667, 0.466667/),  \
    (/0.945098, 0.501961, 0.501961/),  \
    (/0.956863, 0.541176, 0.541176/),  \
    (/0.968627, 0.576471, 0.576471/),  \
    (/0.976471, 0.615686, 0.615686/),  \
    (/0.988235, 0.654902, 0.654902/),  \
    (/1.000000, 0.698039, 0.698039/) \
  /))
end

undef("cyclic_cmap")
function cyclic_cmap()
begin
  return((/ \
    (/1.0,0.0,0.0/), \
    (/0.0,1.0,0.0/), \
    (/0.0,0.0,1.0/), \
    (/1.0,1.0,0.0/), \
    (/0.0,1.0,1.0/), \
    (/1.0,0.0,1.0/) \
  /))
end

undef("gscyclic_cmap")
function gscyclic_cmap()
begin
  return((/ \
    (/0.5,0.5,0.5/), \
    (/0.125,0.125,0.125/), \
    (/0.75,0.75,0.75/), \
    (/0.25,0.25,0.25/), \
    (/0.625,0.625,0.625/), \
    (/0.375,0.375,0.375/) \
  /))
end

undef("gsltod_cmap")
function gsltod_cmap()
begin
  return((/ \
    (/0.96875,0.96875,0.96875/), \
    (/0.93750,0.93750,0.93750/), \
    (/0.90625,0.90625,0.90625/), \
    (/0.87500,0.87500,0.87500/), \
    (/0.84375,0.84375,0.84375/), \
    (/0.81250,0.81250,0.81250/), \
    (/0.78125,0.78125,0.78125/), \
    (/0.75000,0.75000,0.75000/), \
    (/0.71875,0.71875,0.71875/), \
    (/0.68750,0.68750,0.68750/), \
    (/0.65625,0.65625,0.65625/), \
    (/0.62500,0.62500,0.62500/), \
    (/0.59375,0.59375,0.59375/), \
    (/0.56250,0.56250,0.56250/), \
    (/0.53125,0.53125,0.53125/), \
    (/0.50000,0.50000,0.50000/), \
    (/0.46875,0.46875,0.46875/), \
    (/0.43750,0.43750,0.43750/), \
    (/0.40625,0.40625,0.40625/), \
    (/0.37500,0.37500,0.37500/), \
    (/0.34375,0.34375,0.34375/), \
    (/0.31250,0.31250,0.31250/), \
    (/0.28125,0.28125,0.28125/), \
    (/0.25000,0.25000,0.25000/), \
    (/0.21875,0.21875,0.21875/), \
    (/0.18750,0.18750,0.18750/), \
    (/0.15625,0.15625,0.15625/), \
    (/0.12500,0.12500,0.12500/), \
    (/0.09375,0.09375,0.09375/), \
    (/0.06250,0.06250,0.06250/), \
    (/0.03125,0.03125,0.03125/) \
  /))
end

undef("gsdtol_cmap")
function gsdtol_cmap()
begin
  return((/ \
    (/0.03125,0.03125,0.03125/), \
    (/0.06250,0.06250,0.06250/), \
    (/0.09375,0.09375,0.09375/), \
    (/0.12500,0.12500,0.12500/), \
    (/0.15625,0.15625,0.15625/), \
    (/0.18750,0.18750,0.18750/), \
    (/0.21875,0.21875,0.21875/), \
    (/0.25000,0.25000,0.25000/), \
    (/0.28125,0.28125,0.28125/), \
    (/0.31250,0.31250,0.31250/), \
    (/0.34375,0.34375,0.34375/), \
    (/0.37500,0.37500,0.37500/), \
    (/0.40625,0.40625,0.40625/), \
    (/0.43750,0.43750,0.43750/), \
    (/0.46875,0.46875,0.46875/), \
    (/0.50000,0.50000,0.50000/), \
    (/0.53125,0.53125,0.53125/), \
    (/0.56250,0.56250,0.56250/), \
    (/0.59375,0.59375,0.59375/), \
    (/0.62500,0.62500,0.62500/), \
    (/0.65625,0.65625,0.65625/), \
    (/0.68750,0.68750,0.68750/), \
    (/0.71875,0.71875,0.71875/), \
    (/0.75000,0.75000,0.75000/), \
    (/0.78125,0.78125,0.78125/), \
    (/0.81250,0.81250,0.81250/), \
    (/0.84375,0.84375,0.84375/), \
    (/0.87500,0.87500,0.87500/), \
    (/0.90625,0.90625,0.90625/), \
    (/0.93750,0.93750,0.93750/), \
    (/0.96875,0.96875,0.96875/) \
  /))
end

undef("uniform_cmap")
function uniform_cmap()
begin
  return((/ \
    (/0.7500,1.0000,1.0000/), \
    (/0.5000,1.0000,1.0000/), \
    (/0.2500,1.0000,1.0000/), \
    (/0.0000,1.0000,1.0000/), \
    (/1.0000,0.8333,1.0000/), \
    (/0.7500,0.8333,1.0000/), \
    (/0.5000,0.8333,1.0000/), \
    (/0.2500,0.8333,1.0000/), \
    (/0.0000,0.8333,1.0000/), \
    (/1.0000,0.6667,1.0000/), \
    (/0.7500,0.6667,1.0000/), \
    (/0.5000,0.6667,1.0000/), \
    (/0.2500,0.6667,1.0000/), \
    (/0.0000,0.6667,1.0000/), \
    (/1.0000,0.5000,1.0000/), \
    (/0.7500,0.5000,1.0000/), \
    (/0.5000,0.5000,1.0000/), \
    (/0.2500,0.5000,1.0000/), \
    (/0.0000,0.5000,1.0000/), \
    (/1.0000,0.3333,1.0000/), \
    (/0.7500,0.3333,1.0000/), \
    (/0.5000,0.3333,1.0000/), \
    (/0.2500,0.3333,1.0000/), \
    (/0.0000,0.3333,1.0000/), \
    (/1.0000,0.1667,1.0000/), \
    (/0.7500,0.1667,1.0000/), \
    (/0.5000,0.1667,1.0000/), \
    (/0.2500,0.1667,1.0000/), \
    (/0.0000,0.1667,1.0000/), \
    (/1.0000,0.0000,1.0000/), \
    (/0.7500,0.0000,1.0000/), \
    (/0.5000,0.0000,1.0000/), \
    (/0.2500,0.0000,1.0000/), \
    (/0.0000,0.0000,1.0000/), \
    (/1.0000,1.0000,0.2500/), \
    (/0.7500,1.0000,0.2500/), \
    (/0.5000,1.0000,0.2500/), \
    (/0.2500,1.0000,0.2500/), \
    (/0.0000,1.0000,0.2500/), \
    (/1.0000,0.8333,0.2500/), \
    (/0.7500,0.8333,0.2500/), \
    (/0.5000,0.8333,0.2500/), \
    (/0.2500,0.8333,0.2500/), \
    (/0.0000,0.8333,0.2500/), \
    (/1.0000,0.6667,0.2500/), \
    (/0.7500,0.6667,0.2500/), \
    (/0.5000,0.6667,0.2500/), \
    (/0.2500,0.6667,0.2500/), \
    (/0.0000,0.6667,0.2500/), \
    (/1.0000,0.5000,0.2500/), \
    (/0.7500,0.5000,0.2500/), \
    (/0.5000,0.5000,0.2500/), \
    (/0.2500,0.5000,0.2500/), \
    (/0.0000,0.5000,0.2500/), \
    (/1.0000,0.3333,0.2500/), \
    (/0.7500,0.3333,0.2500/), \
    (/0.5000,0.3333,0.2500/), \
    (/0.2500,0.3333,0.2500/), \
    (/0.0000,0.3333,0.2500/), \
    (/1.0000,0.1667,0.2500/), \
    (/0.7500,0.1667,0.2500/), \
    (/0.5000,0.1667,0.2500/), \
    (/0.2500,0.1667,0.2500/), \
    (/0.0000,0.1667,0.2500/), \
    (/1.0000,0.0000,0.2500/), \
    (/0.7500,0.0000,0.2500/), \
    (/0.5000,0.0000,0.2500/), \
    (/0.2500,0.0000,0.2500/), \
    (/0.0000,0.0000,0.2500/), \
    (/1.0000,1.0000,0.5000/), \
    (/0.7500,1.0000,0.5000/), \
    (/0.5000,1.0000,0.5000/), \
    (/0.2500,1.0000,0.5000/), \
    (/0.0000,1.0000,0.5000/), \
    (/1.0000,0.8333,0.5000/), \
    (/0.7500,0.8333,0.5000/), \
    (/0.5000,0.8333,0.5000/), \
    (/0.2500,0.8333,0.5000/), \
    (/0.0000,0.8333,0.5000/), \
    (/1.0000,0.6667,0.5000/), \
    (/0.7500,0.6667,0.5000/), \
    (/0.5000,0.6667,0.5000/), \
    (/0.2500,0.6667,0.5000/), \
    (/0.0000,0.6667,0.5000/), \
    (/1.0000,0.5000,0.5000/), \
    (/0.7500,0.5000,0.5000/), \
    (/0.5000,0.5000,0.5000/), \
    (/0.2500,0.5000,0.5000/), \
    (/0.0000,0.5000,0.5000/), \
    (/1.0000,0.3333,0.5000/), \
    (/0.7500,0.3333,0.5000/), \
    (/0.5000,0.3333,0.5000/), \
    (/0.2500,0.3333,0.5000/), \
    (/0.0000,0.3333,0.5000/), \
    (/1.0000,0.1667,0.5000/), \
    (/0.7500,0.1667,0.5000/), \
    (/0.5000,0.1667,0.5000/), \
    (/0.2500,0.1667,0.5000/), \
    (/0.0000,0.1667,0.5000/), \
    (/1.0000,0.0000,0.5000/), \
    (/0.7500,0.0000,0.5000/), \
    (/0.5000,0.0000,0.5000/), \
    (/0.2500,0.0000,0.5000/), \
    (/0.0000,0.0000,0.5000/), \
    (/1.0000,1.0000,0.7500/), \
    (/0.7500,1.0000,0.7500/), \
    (/0.5000,1.0000,0.7500/), \
    (/0.2500,1.0000,0.7500/), \
    (/0.0000,1.0000,0.7500/), \
    (/1.0000,0.8333,0.7500/), \
    (/0.7500,0.8333,0.7500/), \
    (/0.5000,0.8333,0.7500/), \
    (/0.2500,0.8333,0.7500/), \
    (/0.0000,0.8333,0.7500/), \
    (/1.0000,0.6667,0.7500/), \
    (/0.7500,0.6667,0.7500/), \
    (/0.5000,0.6667,0.7500/), \
    (/0.2500,0.6667,0.7500/), \
    (/0.0000,0.6667,0.7500/), \
    (/1.0000,0.5000,0.7500/), \
    (/0.7500,0.5000,0.7500/), \
    (/0.5000,0.5000,0.7500/), \
    (/0.2500,0.5000,0.7500/), \
    (/0.0000,0.5000,0.7500/), \
    (/1.0000,0.3333,0.7500/), \
    (/0.7500,0.3333,0.7500/), \
    (/0.5000,0.3333,0.7500/), \
    (/0.2500,0.3333,0.7500/), \
    (/0.0000,0.3333,0.7500/), \
    (/1.0000,0.1667,0.7500/), \
    (/0.7500,0.1667,0.7500/), \
    (/0.5000,0.1667,0.7500/), \
    (/0.2500,0.1667,0.7500/), \
    (/0.0000,0.1667,0.7500/), \
    (/1.0000,0.0000,0.7500/), \
    (/0.7500,0.0000,0.7500/), \
    (/0.5000,0.0000,0.7500/), \
    (/0.2500,0.0000,0.7500/), \
    (/0.0000,0.0000,0.7500/), \
    (/1.0000,1.0000,0.0000/), \
    (/0.7500,1.0000,0.0000/), \
    (/0.5000,1.0000,0.0000/), \
    (/0.2500,1.0000,0.0000/), \
    (/0.0000,1.0000,0.0000/), \
    (/1.0000,0.8333,0.0000/), \
    (/0.7500,0.8333,0.0000/), \
    (/0.5000,0.8333,0.0000/), \
    (/0.2500,0.8333,0.0000/), \
    (/0.0000,0.8333,0.0000/), \
    (/1.0000,0.6667,0.0000/), \
    (/0.7500,0.6667,0.0000/), \
    (/0.5000,0.6667,0.0000/), \
    (/0.2500,0.6667,0.0000/), \
    (/0.0000,0.6667,0.0000/), \
    (/1.0000,0.5000,0.0000/), \
    (/0.7500,0.5000,0.0000/), \
    (/0.5000,0.5000,0.0000/), \
    (/0.2500,0.5000,0.0000/), \
    (/0.0000,0.5000,0.0000/), \
    (/1.0000,0.3333,0.0000/), \
    (/0.7500,0.3333,0.0000/), \
    (/0.5000,0.3333,0.0000/), \
    (/0.2500,0.3333,0.0000/), \
    (/0.0000,0.3333,0.0000/), \
    (/1.0000,0.1667,0.0000/), \
    (/0.7500,0.1667,0.0000/), \
    (/0.5000,0.1667,0.0000/), \
    (/0.2500,0.1667,0.0000/), \
    (/0.0000,0.1667,0.0000/), \
    (/1.0000,0.0000,0.0000/), \
    (/0.7500,0.0000,0.0000/), \
    (/0.5000,0.0000,0.0000/), \
    (/0.2500,0.0000,0.0000/) \
  /))
end

undef("temp1_cmap")
function temp1_cmap()
begin
  return((/ \
    (/0.700,0.700,0.700/), \
    (/0.650,0.650,0.700/), \
    (/0.610,0.600,0.700/), \
    (/0.550,0.550,0.700/), \
    (/0.560,0.500,0.700/), \
    (/0.450,0.450,0.700/), \
    (/0.420,0.400,0.700/), \
    (/0.350,0.350,0.700/), \
    (/0.300,0.300,0.700/), \
    (/0.250,0.250,0.700/), \
    (/0.200,0.200,0.700/), \
    (/0.150,0.150,0.700/), \
    (/0.100,0.100,0.700/), \
    (/0.050,0.050,0.700/), \
    (/0.000,0.000,0.700/), \
    (/0.000,0.050,0.700/), \
    (/0.000,0.100,0.700/), \
    (/0.000,0.150,0.700/), \
    (/0.000,0.200,0.700/), \
    (/0.000,0.250,0.700/), \
    (/0.000,0.300,0.700/), \
    (/0.000,0.350,0.700/), \
    (/0.000,0.400,0.700/), \
    (/0.000,0.450,0.600/), \
    (/0.000,0.500,0.500/), \
    (/0.000,0.550,0.400/), \
    (/0.000,0.600,0.300/), \
    (/0.000,0.650,0.200/), \
    (/0.000,0.700,0.100/), \
    (/0.000,0.725,0.000/), \
    (/0.000,0.690,0.000/), \
    (/0.030,0.685,0.000/), \
    (/0.060,0.680,0.000/), \
    (/0.100,0.575,0.000/), \
    (/0.130,0.570,0.000/), \
    (/0.160,0.565,0.000/), \
    (/0.550,0.550,0.000/), \
    (/0.555,0.545,0.000/), \
    (/0.560,0.530,0.000/), \
    (/0.565,0.485,0.000/), \
    (/0.570,0.420,0.000/), \
    (/0.675,0.375,0.000/), \
    (/0.680,0.330,0.000/), \
    (/0.690,0.300,0.000/), \
    (/0.700,0.285,0.000/), \
    (/0.700,0.270,0.000/), \
    (/0.700,0.260,0.000/), \
    (/0.700,0.240,0.000/), \
    (/0.700,0.180,0.000/), \
    (/0.700,0.130,0.000/), \
    (/0.700,0.120,0.000/), \
    (/0.700,0.100,0.000/), \
    (/0.700,0.090,0.000/), \
    (/0.750,0.090,0.000/), \
    (/0.800,0.090,0.000/), \
    (/0.830,0.070,0.000/), \
    (/0.870,0.050,0.000/), \
    (/0.900,0.030,0.000/), \
    (/0.950,0.010,0.000/), \
    (/0.990,0.000,0.000/), \
    (/1.000,0.000,0.000/) \
  /))
end

undef("psgcap_cmap")
function psgcap_cmap()
begin
  return((/ \
    (/1.00,0.00,0.00/), \
    (/0.00,1.00,0.00/), \
    (/0.00,0.00,1.00/), \
    (/0.00,1.00,1.00/), \
    (/1.00,0.00,0.83/), \
    (/1.00,1.00,0.00/), \
    (/1.00,0.50,0.00/), \
    (/0.60,0.83,0.00/), \
    (/0.00,1.00,0.60/), \
    (/0.00,0.50,1.00/), \
    (/0.55,0.00,0.83/), \
    (/1.00,0.00,0.55/), \
    (/0.33,0.33,0.33/), \
    (/0.67,0.67,0.67/), \
    (/1.00,1.00,0.33/), \
    (/0.75,1.00,0.45/), \
    (/0.45,1.00,0.60/), \
    (/0.17,1.00,0.75/), \
    (/0.25,0.83,0.83/), \
    (/0.50,0.67,0.83/), \
    (/0.75,0.55,0.83/), \
    (/1.00,0.33,0.90/), \
    (/0.67,0.90,0.45/), \
    (/0.40,0.90,0.55/), \
    (/0.17,0.90,0.67/), \
    (/0.17,0.67,0.90/), \
    (/0.17,0.50,1.00/), \
    (/0.45,0.33,1.00/), \
    (/0.75,0.17,1.00/), \
    (/0.90,0.09,1.00/), \
    (/0.83,1.00,0.17/), \
    (/0.67,1.00,0.25/), \
    (/0.45,1.00,0.33/), \
    (/0.17,1.00,0.50/), \
    (/0.17,0.83,0.60/), \
    (/0.17,0.67,0.75/), \
    (/0.17,0.55,0.83/), \
    (/0.25,0.45,0.90/), \
    (/0.40,0.33,0.90/), \
    (/0.67,0.17,0.90/), \
    (/0.83,0.17,0.83/), \
    (/0.90,0.33,0.67/), \
    (/0.83,0.45,0.60/), \
    (/0.83,0.60,0.50/), \
    (/0.90,0.67,0.40/), \
    (/0.90,0.67,0.25/), \
    (/1.00,0.90,0.09/), \
    (/0.83,1.00,0.09/), \
    (/0.60,1.00,0.17/), \
    (/0.45,1.00,0.25/), \
    (/0.17,0.90,0.45/), \
    (/0.17,0.83,0.55/), \
    (/0.17,0.67,0.67/), \
    (/0.17,0.55,0.75/), \
    (/0.17,0.40,0.90/), \
    (/0.40,0.25,0.90/), \
    (/0.55,0.17,0.90/), \
    (/0.83,0.17,0.75/), \
    (/1.00,0.17,0.67/), \
    (/1.00,0.25,0.60/), \
    (/1.00,0.40,0.50/), \
    (/1.00,0.50,0.40/), \
    (/1.00,0.83,0.09/), \
    (/0.75,1.00,0.00/), \
    (/0.60,1.00,0.13/), \
    (/0.40,1.00,0.17/), \
    (/0.13,1.00,0.33/), \
    (/0.13,0.83,0.45/), \
    (/0.17,0.75,0.50/), \
    (/0.13,0.60,0.67/), \
    (/0.13,0.50,0.75/), \
    (/0.13,0.40,0.83/), \
    (/0.17,0.25,0.90/), \
    (/0.17,0.17,1.00/), \
    (/0.33,0.09,1.00/), \
    (/0.55,0.09,0.90/), \
    (/0.75,0.00,0.83/), \
    (/0.90,0.00,0.75/), \
    (/0.90,0.75,0.09/), \
    (/0.67,0.90,0.09/), \
    (/0.55,0.90,0.13/), \
    (/0.25,0.90,0.25/), \
    (/0.13,0.90,0.33/), \
    (/0.17,0.75,0.40/), \
    (/0.13,0.67,0.50/), \
    (/0.13,0.55,0.60/), \
    (/0.13,0.45,0.67/), \
    (/0.17,0.33,0.75/), \
    (/0.17,0.25,0.83/), \
    (/0.33,0.17,0.83/), \
    (/0.55,0.13,0.75/), \
    (/0.75,0.13,0.67/), \
    (/0.90,0.17,0.55/), \
    (/0.83,0.25,0.50/), \
    (/0.83,0.75,0.00/), \
    (/0.60,0.83,0.09/), \
    (/0.45,0.90,0.09/), \
    (/0.33,0.90,0.13/), \
    (/0.13,0.90,0.25/), \
    (/0.17,0.83,0.25/), \
    (/0.17,0.75,0.33/), \
    (/0.17,0.60,0.45/), \
    (/0.13,0.50,0.55/), \
    (/0.13,0.45,0.60/), \
    (/0.17,0.33,0.67/), \
    (/0.33,0.25,0.67/), \
    (/0.45,0.25,0.60/), \
    (/0.67,0.25,0.50/), \
    (/0.83,0.25,0.40/), \
    (/1.00,0.25,0.33/), \
    (/0.75,0.67,0.00/), \
    (/0.55,0.75,0.09/), \
    (/0.40,0.83,0.09/), \
    (/0.25,0.90,0.09/), \
    (/0.17,0.90,0.13/), \
    (/0.17,0.83,0.17/), \
    (/0.13,0.75,0.25/), \
    (/0.13,0.67,0.33/), \
    (/0.13,0.60,0.40/), \
    (/0.13,0.45,0.50/), \
    (/0.13,0.40,0.55/), \
    (/0.25,0.33,0.55/), \
    (/0.45,0.33,0.45/), \
    (/0.55,0.33,0.40/), \
    (/0.67,0.33,0.33/), \
    (/0.83,0.33,0.25/), \
    (/0.67,0.60,0.00/), \
    (/0.50,0.67,0.09/), \
    (/0.40,0.67,0.13/), \
    (/0.25,0.67,0.17/), \
    (/0.13,0.67,0.25/), \
    (/0.09,0.60,0.33/), \
    (/0.09,0.50,0.40/), \
    (/0.13,0.40,0.45/), \
    (/0.13,0.33,0.50/), \
    (/0.09,0.17,0.67/), \
    (/0.17,0.13,0.67/), \
    (/0.40,0.13,0.55/), \
    (/0.50,0.13,0.50/), \
    (/0.60,0.13,0.45/), \
    (/0.75,0.13,0.40/), \
    (/0.90,0.13,0.33/), \
    (/0.55,0.50,0.09/), \
    (/0.45,0.60,0.09/), \
    (/0.33,0.60,0.13/), \
    (/0.17,0.60,0.17/), \
    (/0.09,0.55,0.25/), \
    (/0.13,0.45,0.33/), \
    (/0.09,0.40,0.40/), \
    (/0.17,0.33,0.40/), \
    (/0.17,0.25,0.45/), \
    (/0.25,0.17,0.50/), \
    (/0.25,0.13,0.55/), \
    (/0.33,0.13,0.50/), \
    (/0.45,0.13,0.45/), \
    (/0.55,0.13,0.40/), \
    (/0.67,0.13,0.33/), \
    (/0.83,0.13,0.25/), \
    (/0.50,0.45,0.09/), \
    (/0.40,0.50,0.09/), \
    (/0.33,0.60,0.00/), \
    (/0.17,0.60,0.09/), \
    (/0.13,0.67,0.09/), \
    (/0.13,0.60,0.13/), \
    (/0.13,0.50,0.17/), \
    (/0.09,0.45,0.25/), \
    (/0.13,0.40,0.25/), \
    (/0.13,0.33,0.33/), \
    (/0.09,0.25,0.40/), \
    (/0.09,0.17,0.50/), \
    (/0.09,0.13,0.55/), \
    (/0.13,0.00,0.60/), \
    (/0.33,0.00,0.50/), \
    (/0.50,0.00,0.40/), \
    (/0.75,0.33,0.00/), \
    (/0.67,0.40,0.00/), \
    (/0.55,0.40,0.09/), \
    (/0.33,0.40,0.17/), \
    (/0.25,0.33,0.25/), \
    (/0.25,0.25,0.33/), \
    (/0.25,0.17,0.40/), \
    (/0.33,0.13,0.40/), \
    (/0.50,0.13,0.33/), \
    (/0.60,0.13,0.25/), \
    (/0.75,0.09,0.25/), \
    (/0.83,0.00,0.25/), \
    (/1.00,0.00,0.17/), \
    (/1.00,0.13,0.13/), \
    (/0.90,0.17,0.09/), \
    (/0.83,0.25,0.09/), \
    (/0.60,0.25,0.00/), \
    (/0.45,0.40,0.00/), \
    (/0.25,0.40,0.13/), \
    (/0.25,0.33,0.17/), \
    (/0.17,0.25,0.25/), \
    (/0.17,0.17,0.33/), \
    (/0.25,0.13,0.33/), \
    (/0.33,0.09,0.33/), \
    (/0.50,0.09,0.25/), \
    (/0.67,0.09,0.17/), \
    (/0.83,0.00,0.17/), \
    (/0.90,0.00,0.13/), \
    (/1.00,0.00,0.09/), \
    (/1.00,0.13,0.09/), \
    (/0.83,0.17,0.00/), \
    (/0.75,0.25,0.00/), \
    (/0.50,0.17,0.00/), \
    (/0.40,0.33,0.00/), \
    (/0.13,0.45,0.09/), \
    (/0.09,0.40,0.13/), \
    (/0.09,0.33,0.17/), \
    (/0.09,0.25,0.25/), \
    (/0.13,0.17,0.33/), \
    (/0.17,0.09,0.40/), \
    (/0.25,0.00,0.33/), \
    (/0.45,0.00,0.25/), \
    (/0.60,0.00,0.17/), \
    (/0.75,0.00,0.13/), \
    (/0.83,0.00,0.09/), \
    (/0.75,0.09,0.09/), \
    (/0.67,0.13,0.09/), \
    (/0.60,0.17,0.00/), \
    (/0.40,0.17,0.00/), \
    (/0.17,0.33,0.00/), \
    (/0.09,0.33,0.00/), \
    (/0.09,0.25,0.09/), \
    (/0.09,0.17,0.13/), \
    (/0.09,0.13,0.25/), \
    (/0.09,0.13,0.33/), \
    (/0.09,0.00,0.33/), \
    (/0.13,0.00,0.25/), \
    (/0.17,0.00,0.17/), \
    (/0.33,0.00,0.17/), \
    (/0.33,0.00,0.13/), \
    (/0.40,0.00,0.09/), \
    (/0.45,0.09,0.09/), \
    (/0.45,0.13,0.00/), \
    (/0.17,0.09,0.00/) \
  /))
end

undef("example_cmap")
function example_cmap()
begin
  return((/ \
    (/1.000000,1.000000,0.968627/), \
    (/1.000000,1.000000,0.905882/), \
    (/1.000000,1.000000,0.843137/), \
    (/1.000000,1.000000,0.780392/), \
    (/1.000000,1.000000,0.717647/), \
    (/1.000000,1.000000,0.654902/), \
    (/1.000000,1.000000,0.592157/), \
    (/1.000000,1.000000,0.529412/), \
    (/1.000000,1.000000,0.470588/), \
    (/1.000000,1.000000,0.407843/), \
    (/1.000000,1.000000,0.345098/), \
    (/1.000000,1.000000,0.282353/), \
    (/1.000000,1.000000,0.219608/), \
    (/1.000000,1.000000,0.156863/), \
    (/1.000000,1.000000,0.094118/), \
    (/1.000000,1.000000,0.031373/), \
    (/1.000000,0.968627,0.031373/), \
    (/1.000000,0.905882,0.094118/), \
    (/1.000000,0.843137,0.156863/), \
    (/1.000000,0.780392,0.219608/), \
    (/1.000000,0.717647,0.282353/), \
    (/1.000000,0.654902,0.345098/), \
    (/1.000000,0.592157,0.407843/), \
    (/1.000000,0.529412,0.470588/), \
    (/1.000000,0.470588,0.529412/), \
    (/1.000000,0.407843,0.592157/), \
    (/1.000000,0.345098,0.654902/), \
    (/1.000000,0.282353,0.717647/), \
    (/1.000000,0.219608,0.780392/), \
    (/1.000000,0.156863,0.843137/), \
    (/1.000000,0.094118,0.905882/), \
    (/1.000000,0.031373,0.968627/), \
    (/1.000000,0.000000,0.968627/), \
    (/1.000000,0.000000,0.905882/), \
    (/1.000000,0.000000,0.843137/), \
    (/1.000000,0.000000,0.780392/), \
    (/1.000000,0.000000,0.717647/), \
    (/1.000000,0.000000,0.654902/), \
    (/1.000000,0.000000,0.592157/), \
    (/1.000000,0.000000,0.529412/), \
    (/1.000000,0.000000,0.470588/), \
    (/1.000000,0.000000,0.407843/), \
    (/1.000000,0.000000,0.345098/), \
    (/1.000000,0.000000,0.282353/), \
    (/1.000000,0.000000,0.219608/), \
    (/1.000000,0.000000,0.156863/), \
    (/1.000000,0.000000,0.094118/), \
    (/1.000000,0.000000,0.031373/), \
    (/0.968627,0.031373,0.031373/), \
    (/0.905882,0.094118,0.094118/), \
    (/0.843137,0.156863,0.156863/), \
    (/0.780392,0.219608,0.219608/), \
    (/0.717647,0.282353,0.282353/), \
    (/0.654902,0.345098,0.345098/), \
    (/0.592157,0.407843,0.407843/), \
    (/0.529412,0.470588,0.470588/), \
    (/0.470588,0.529412,0.529412/), \
    (/0.407843,0.592157,0.592157/), \
    (/0.345098,0.654902,0.654902/), \
    (/0.282353,0.717647,0.717647/), \
    (/0.219608,0.780392,0.780392/), \
    (/0.156863,0.843137,0.843137/), \
    (/0.094118,0.905882,0.905882/), \
    (/0.031373,0.968627,0.968627/), \
    (/0.000000,1.000000,0.968627/), \
    (/0.000000,1.000000,0.937255/), \
    (/0.000000,1.000000,0.874510/), \
    (/0.000000,1.000000,0.811765/), \
    (/0.000000,1.000000,0.780392/), \
    (/0.000000,1.000000,0.717647/), \
    (/0.000000,1.000000,0.654902/), \
    (/0.000000,1.000000,0.592157/), \
    (/0.000000,1.000000,0.529412/), \
    (/0.000000,1.000000,0.470588/), \
    (/0.000000,1.000000,0.407843/), \
    (/0.000000,1.000000,0.345098/), \
    (/0.000000,1.000000,0.282353/), \
    (/0.000000,1.000000,0.219608/), \
    (/0.000000,1.000000,0.156863/), \
    (/0.000000,1.000000,0.094118/), \
    (/0.000000,1.000000,0.031373/), \
    (/0.000000,0.968627,0.031373/), \
    (/0.000000,0.905882,0.094118/), \
    (/0.000000,0.843137,0.156863/), \
    (/0.000000,0.780392,0.219608/), \
    (/0.000000,0.717647,0.282353/), \
    (/0.000000,0.654902,0.345098/), \
    (/0.000000,0.592157,0.407843/), \
    (/0.000000,0.529412,0.470588/), \
    (/0.000000,0.470588,0.529412/), \
    (/0.000000,0.407843,0.592157/), \
    (/0.000000,0.345098,0.654902/), \
    (/0.000000,0.282353,0.717647/), \
    (/0.000000,0.219608,0.780392/), \
    (/0.000000,0.156863,0.843137/), \
    (/0.000000,0.094118,0.905882/), \
    (/0.000000,0.031373,0.968627/), \
    (/0.000000,0.000000,0.968627/), \
    (/0.000000,0.000000,0.905882/), \
    (/0.000000,0.000000,0.843137/), \
    (/0.000000,0.000000,0.780392/), \
    (/0.000000,0.000000,0.717647/), \
    (/0.000000,0.000000,0.654902/), \
    (/0.000000,0.000000,0.592157/), \
    (/0.000000,0.000000,0.529412/), \
    (/0.000000,0.000000,0.470588/), \
    (/0.000000,0.000000,0.407843/), \
    (/0.000000,0.000000,0.345098/), \
    (/0.000000,0.000000,0.282353/), \
    (/0.000000,0.000000,0.219608/), \
    (/0.000000,0.000000,0.156863/), \
    (/0.000000,0.000000,0.094118/), \
    (/0.000000,0.000000,0.031373/) \
  /))
end

;***********************************************************************;
; Function : read_colormap_file                                         ;
;               colorMapName : either the name of an NCL-standard       ;
;                              colormap, or the filename of a           ;
;                              user-supplied colormap.                  ;
;                                                                       ;
; This function either reads an NCL-standard colormap, given is name,   ;
; or expects to read a colormap from a given file.  It supports reading ;
; either RGB-tuples or RGBA-tuples (or a mixture); it always returns a  ;
; colormap comprised of RGBA-tuples.                                    ;
;                                                                       ;
; This function was moved to utilities.ncl (from gsn_code.ncl) to make  ;
; it more accessible (say by functions in contributed.ncl).             ;
;***********************************************************************;
undef("read_colormap_file")
function read_colormap_file(colorMapName:string)
local pathname, lines, tokens, cmap, tmpCmap, i, numColors, \
      red, green, blue, alpha, maxValue, MAXCOLORS
begin
;
; The if statements below were added in October 2013 to handle
; the built-in color maps. The better way to do this is probably
; to add the *.rgb versions of the built-in colormaps, but this
; may be an incompatible change that I'm not aware of yet.
;
  if(colorMapName.eq."cyclic") then
    return(cyclic_cmap())
  end if
  if(colorMapName.eq."example") then
    return(example_cmap())
  end if
  if(colorMapName.eq."gscyclic") then
    return(gscyclic_cmap())
  end if
  if(colorMapName.eq."gsdtol") then
    return(gsdtol_cmap())
  end if
  if(colorMapName.eq."gsltod") then
    return(gsltod_cmap())
  end if
  if(colorMapName.eq."ncl_default") then
    return(ncl_default_cmap())
  end if
  if(colorMapName.eq."psgcap") then
    return(psgcap_cmap())
  end if
  if(colorMapName.eq."temp1") then
    return(temp1_cmap())
  end if
  if(colorMapName.eq."uniform") then
    return(uniform_cmap())
  end if

; If you get this far, then you are dealing with a non built-in colormap
  MAXCOLORS = 256     ; symbolic constant, used below

  ; ----------------------------------------------------------
  ; Inner convenience function to test string as suitable for 
  ; conversion to numeric.
  undef("isNumerical")
  function isNumerical(s:string)
  local seenDecimal, charS, len, i
  begin
    seenDecimal = False
    charS = stringtocharacter(s)
    len = strlen(s)
    do i=0, len-1
      if (charS(i).eq.".") then
        if (seenDecimal) then
          return False
        else
          seenDecimal = True
        end if
      else
        if (charS(i).lt."0" .or. charS(i).gt."9") then
          return False
        end if
      end if
    end do
    return True
  end

  ; ------------------------------------------------------------
  ; Inner convenience function to find appropriate pathname for 
  ; the given filename.
  undef("getFilePath")
  function getFilePath(colorMapName:string)
  local suffixes, paths, path1, path2, i, j, tmp
  begin

    ; Is this one of our standard named colormaps? There are several well-defined
    ; locations and suffixes to try...
    tmp = getenv("NCARG_COLORMAPS")
    if (.not.ismissing(tmp)) then
        paths = str_split(tmp, ":")
    else 
        paths = (/ ncargpath("ncarg") + "/colormaps" /)
    end if

    suffixes = (/ ".rgb", ".gp", ".ncmap" /)

    ; loop over the product of possible paths and possible suffixes...
    do i=0, dimsizes(paths)-1
        path1 = paths(i) + "/" + colorMapName
        do j=0, dimsizes(suffixes)-1
            path2 = path1 + suffixes(j)
            if (isfilepresent(path2)) then
              return path2
            end if
          end do
    end do

    ; if still here, just return colorMapName literally; presumably is a 
    ; filename for a user-managed colormap...
    return colorMapName
  end

  ; get an appropriate pathname for the given colortable name and load it..
  pathname = getFilePath(colorMapName)
  lines = asciiread(pathname, -1, "string")
  lines = str_squeeze(lines)

  ; parse upto MAXCOLORS rgba tuples from the file just read...
  tmpCmap = new((/ MAXCOLORS, 4 /), "float")
  numColors = 0
  maxValue = -1.0
  i = 0
  do while (i.lt.dimsizes(lines) .and. numColors.lt.MAXCOLORS)
      if (strlen(lines(i)).eq.0) then  
          lines(i) = "#"  ; zero-lengthed lines cause us grief...
      end if 
      tokens = str_split(lines(i), " ")
      if (dimsizes(tokens).ge.3) then
          red = -1.0
          green = -1.0
          blue = -1.0
          if (isNumerical(tokens(0))) then
              red = stringtofloat(tokens(0))
          end if
          if (isNumerical(tokens(1))) then
              green = stringtofloat(tokens(1))
          end if
          if (isNumerical(tokens(2))) then
              blue = stringtofloat(tokens(2))
          end if
          if (dimsizes(tokens).gt.3 .and. isNumerical(tokens(3))) then
              alpha = stringtofloat(tokens(3))
          else
              alpha = -1.0  ; used a marker, replaced appropriately below...
          end if

          ; were we able to get a rgba-tuple?
          ;
          if (red.ge.0 .and. green.ge.0 .and. blue.ge.0) then
              ; yes, add it to our colormap...
              tmpCmap(numColors,0) = red
              tmpCmap(numColors,1) = green
              tmpCmap(numColors,2) = blue
              tmpCmap(numColors,3) = alpha
              numColors = numColors + 1
              ; keep track of the magnitude of these values; used to rescale below...
              if (red.gt.maxValue) then
                  maxValue = red
              end if
              if (green.gt.maxValue) then
                  maxValue = green
              end if
              if (blue.gt.maxValue) then
                  maxValue = blue
              end if
          end if
      end if
      i = i + 1
      delete(tokens)
  end do

  ; copy tmpCmap into appropriately sized array
  cmap = new((/numColors, 4/), float)
  cmap = tmpCmap(0:numColors-1,:)

  ; normalize the values...(oh for true if-elseif!)
  ; this logical taken directly from HLU code in "Palette.c"
  if (maxValue.le.1) then
      cmap(:,3) = where(cmap(:,3).lt.0, 1., cmap(:,3))
  else if (maxValue.lt.256) then
      cmap(:,3) = where(cmap(:,3).lt.0, 255., cmap(:,3))
      cmap = cmap / 255.
  else if (maxValue.eq.256) then
      cmap(:,3) = where(cmap(:,3).lt.0, 256., cmap(:,3))
      cmap = cmap / 256.
  else if (maxValue.eq.65536) then
      cmap(:,3) = where(cmap(:,3).lt.0, 65535., cmap(:,3))
      cmap = cmap / 65535. 
  else if (maxValue.eq.65536) then
      cmap(:,3) = where(cmap(:,3).lt.0, 65536., cmap(:,3))
      cmap = cmap / 65536.
  else
      cmap(:,3) = where(cmap(:,3).lt.0, maxValue, cmap(:,3))
      cmap = cmap / maxValue
  end if
  end if 
  end if
  end if
  end if
        
  return cmap
end
