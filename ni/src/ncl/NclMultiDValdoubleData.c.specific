
/*
 *      $Id: NclMultiDValdoubleData.c.specific,v 1.1 1994-07-14 20:46:50 ethan Exp $
 */
/************************************************************************
*									*
*			     Copyright (C)  1994			*
*	     University Corporation for Atmospheric Research		*
*			     All Rights Reserved			*
*									*
************************************************************************/
/*
 *	File:		
 *
 *	Author:		Ethan Alpert
 *			National Center for Atmospheric Research
 *			PO 3000, Boulder, Colorado
 *
 *	Date:		Thu Jan 13 14:56:13 MST 1994
 *
 *	Description:	
 */
static NclData MultiDVal_double_md_Coerce
#if  __STDC__
(NclData  self, NclObjTypes coerce_to_obj, NclScalar* new_missing)
#else
(self, coerce_to_obj, new_missing)
	NclData  self;
	NclObjTypes coerce_to_obj;
	NclScalar *new_missing;
#endif
{
	NclMultiDValdoubleData self_md = (NclMultiDValdoubleData)self;
	if(self_md->obj.obj_type == Ncl_MultiDValdoubleData) {
		if((new_missing == NULL)||(!self_md->multidval.missing_value.has_missing)) {
			return(self);
		} else if(self_md->multidval.missing_value.value.doubleval != new_missing->doubleval) {
			if(self->obj.status == TEMPORARY) {
/*
* This avoids a new allocation and copy but probably costs more time
*/
				_NclResetMissingValue((NclMultiDValData)self,new_missing);
				return(self);
			} else {
				return((NclData)_NclCopyVal((NclMultiDValData)self,new_missing));
			}
		} else {
				return(self);
		}
	} else {
		return(NULL);
	}
}

static NclData MultiDVal_double_s_Coerce
#if  __STDC__
(NclData self, NclObjTypes coerce_to_obj, NclScalar* new_missing)
#else
(self, coerce_to_obj,new_missing)
NclData self;
NclObjTypes coerce_to_obj;
NclScalar *new_missing;
#endif
{
	NclMultiDValdoubleData self_md = (NclMultiDValdoubleData)self;
	if(self_md->obj.obj_type == Ncl_MultiDValdoubleData) {
		if((new_missing == NULL )||(!self_md->multidval.missing_value.has_missing)) {
			return(self);
		}  else if(new_missing->doubleval != self_md->multidval.missing_value.value.doubleval){
			if(self->obj.status == TEMPORARY) {
/*
* This avoids a new allocation and copy but probably costs more time
*/
				_NclResetMissingValue((NclMultiDValData)self,new_missing);
				return(self);
			} else {
				return((NclData)_NclCopyVal((NclMultiDValData)self,new_missing));
			}
		} else {
			return(self);
		}
	} else {
		return(NULL);
	}
}
