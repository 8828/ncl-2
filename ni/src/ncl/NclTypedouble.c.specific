
/*
 *      $Id: NclTypedouble.c.specific,v 1.5 1997-01-16 19:44:10 ethan Exp $
 */
/************************************************************************
*									*
*			     Copyright (C)  1995			*
*	     University Corporation for Atmospheric Research		*
*			     All Rights Reserved			*
*									*
************************************************************************/
/*
 *	File:		
 *
 *	Author:		Ethan Alpert
 *			National Center for Atmospheric Research
 *			PO 3000, Boulder, Colorado
 *
 *	Date:		Fri Jan 27 18:26:03 MST 1995
 *
 *	Description:	
 */
#include "NclTypelogical.h"
#include "NclTypefloat.h"
#include <ncarg/hlu/hluutil.h>

static NhlErrorTypes Ncl_Type_double_print
#if	NhlNeedProto
(FILE *fp, void * val)
#else
(fp,val)
FILE *fp;
void *val;
#endif
{
	double *dp = (double*)val;
	int ret;

	ret =nclfprintf(fp,"%g",*dp);
	if(ret < 0) {
                return(NhlWARNING);
        } else {
                return(NhlNOERROR);
        }

}







static NhlErrorTypes Ncl_Type_double_coerce
#if	NhlNeedProto
(void * result, void* from, int n, NclScalar* from_m, NclScalar *to_m,NclTypeClass fc)
#else
(result, from, n, from_m, to_m, fc)
void * result;
void* from;
int n;
NclScalar* from_m;
NclScalar *to_m;
NclTypeClass fc;
#endif
{
	int i;
	double *res = (double*)result;
	logical tmp;
	NclTypeOp eq;
	NclScalar tmp_mis;
	

        if((fc == NULL)||(fc->type_class.eq == NULL)
		||(result == NULL)
		||(from==NULL))
                return(NhlFATAL);
        else
                eq = fc->type_class.eq;
        if(to_m == NULL){  
		tmp_mis.doubleval = ((NclTypeClass)nclTypedoubleClass)->type_class.default_mis.doubleval;
        } else{
		tmp_mis.doubleval = to_m->doubleval;
	}



	switch(fc->type_class.type) {
	case Ncl_Typedouble: {
                double *fl = (double*)from;
                if(from_m == NULL) {
                        for(i = 0; i < n;i++,res++,fl++)  {
                                *res = (double)*fl;
                        }
                } else {
                        for(i = 0; i < n;i++,res++,fl++)  {
                                tmp = 0;
                                (*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
                                if(tmp) {
                                        *res = tmp_mis.doubleval;
                                } else {
                                        *res = (double)*fl;
                                }
                        }
                }
                return(NhlNOERROR);
	}
	case Ncl_Typefloat: {
		float *fl = (float*)from;
		if(from_m == NULL) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (double)*fl;
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.doubleval;
				} else {
					*res = (double)*fl;
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typelong: {
		long *fl = (long *)from;
		if(from_m == NULL) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (double)*fl;
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.doubleval;
				} else {
					*res = (double)*fl;
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeint: {
		int *fl = (int*)from;
		if(from_m == NULL) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (double)*fl;
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.doubleval;
				} else {
					*res = (double)*fl;
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeshort: {
		short *fl = (short*)from;
		if(from_m == NULL) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (double)*fl;
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.doubleval;
				} else {
					*res = (double)*fl;
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typebyte: {
		byte *fl = (byte*)from;
		if(from_m == NULL) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (double)*fl;
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.doubleval;
				} else {
					*res = (double)*fl;
				}
			}
		}
		return(NhlNOERROR);
	}
	default:
		return(NhlFATAL);
	}
}

static NhlErrorTypes Ncl_Type_double_cmpf
#if     NhlNeedProto
(void *lhs, void* rhs, NclScalar* lhs_m, NclScalar *rhs_m,int digits, double* result)
#else
(lhs, rhs, lhs_m, rhs_m, digits, result)
void *lhs;
void* rhs;
NclScalar* lhs_m;
NclScalar *rhs_m;
int digits;
double * result;
#endif
{
	double dres;
	if((lhs_m != NULL)&&(lhs_m->doubleval == *(double*)lhs)) {
                return(NhlFATAL);
        } else if((rhs_m != NULL)&&(rhs_m->doubleval == *(double*)rhs)) {
                return(NhlFATAL);
        } else {
		*result =  _NhlCmpDAny(*(double*)lhs,*(double*)rhs,7);
		return(NhlNOERROR);
	}
}

