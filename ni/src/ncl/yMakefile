#
#      $Id: yMakefile,v 1.22 1994-11-10 20:59:38 ethan Exp $
#
#########################################################################
#									#
#			   Copyright (C)  1993				#
#	     University Corporation for Atmospheric Research		#
#			   All Rights Reserved				#
#									#
#########################################################################
#
#	File:		
#
#	Author:		Ethan Alpert
#			National Center for Atmospheric Research
#			PO 3000, Boulder, Colorado
#
#	Date:		Fri Sep 24 09:53:33 MDT 1993
#
#	Description:	
#
#	Usage:
#
#	Environment:
#
#	Files:
#
#
#	Options:

#define IHaveSubdirs

SUBDIRS = yacc

MYBIN		=	ncl
MYLIB		=	libncl.a
MYLIB_API	=	libnclapi.a
YACC		=	./yacc/byacc
YACCDIR		=	./yacc


#ifdef  HPUX
ARCH_LIBS	=	-lPW
#endif

EXTRA_DEFINES = $(OS1_DEF)

API_DEFS	=	-DMAKEAPI

PROG_LIBS	=	$(HLULIBS) $(CNCARGLIBS) $(NCARGLIBS)
#ifdef  UseInstalled
DEPLIBS		=
#else
DEPLIBS		=	$(DEPHLULIBS) $(DEPCNCARGLIBS) $(DEPNCARGLIBS)
#endif
EXTRA_LIBS	=	-ll $(NCDFLIBS) $(XLIB)
SYS_LIBS	=	$(CTOFLIBS) -lm $(ARCH_LIBS)

HDRS		=	$(GEN_HDRS) $(STATIC_HDRS) $(INSTALL_HDRS)

GEN_HDRS	=	NclMultiDValnclfileData.h NclMultiDVallogicalData.h \
			NclMultiDValdoubleData.h NclMultiDValfloatData.h \
			NclMultiDValintData.h NclMultiDVallongData.h \
			NclMultiDValshortData.h NclMultiDValstringData.h \
			parser.h NclMultiDValbyteData.h NclMultiDValcharData.h

STATIC_HDRS	=	AttSupport.h DataSupport.h FileSupport.h Keywords.h \
			Machine.h NclAtt.h NclData.h NclDataDefs.h \
			NclFile.h NclFileInterfaces.h NclHLUObj.h NclMdInc.h \
			NclMultiDValData.h NclMultiDValHLUObjData.h \
			OpsFuncs.h OpsList.h SrcTree.h Symbol.h VarSupport.h \
			NclFileVar.h NclHLUVar.h HLUSupport.h

INSTALL_HDRS	=	defs.h NclApi.h ApiRecords.h NclVar.h

API_SRCS	=	NclApi.c scanapi.c parseapi.c 
EXE_SRCS	=	Ncl.c yywrap.c scanner.c parser.c io.c

APISRCS		=	$(API_SRCS) $(SRCS)
EXESRCS		=	$(EXE_SRCS) $(SRCS)
ALLSRCS		=	$(EXESRCS)
SRCS		=	$(GEN_SRCS) $(STATIC_SRCS)

GEN_SRCS	=	NclMultiDValdoubleData.c NclMultiDValfloatData.c \
			NclMultiDValintData.c NclMultiDVallogicalData.c \
			NclMultiDVallongData.c NclMultiDValnclfileData.c \
			NclMultiDValshortData.c NclMultiDValstringData.c \
			scanner.c parser.c NclMultiDValbyteData.c \
			NclMultiDValcharData.c

STATIC_SRCS	=	AddBuiltIns.c AddFileFormats.c AddHLUObjs.c \
			AddIntrinsics.c AttSupport.c DataSupport.c Execute.c \
			FileSupport.c Formats.c InitData.c Machine.c Memory.c \
			NclAtt.c NclData.c NclFile.c NclHLUObj.c \
			NclMultiDValData.c NclMultiDValHLUObjData.c \
			NclNetCdf.c NclVar.c OpsFuncs.c Printtoken.c SrcTree.c \
			Symbol.c Translate.c VarSupport.c NclFileVar.c \
			NclHLUVar.c HLUSupport.c

API_OBJS	=	NclApi.o scanapi.o parseapi.o ioapi.o NclHLUObjapi.o
EXE_OBJS	=	Ncl.o yywrap.o scanner.o parser.o io.o NclHLUObj.o

APIOBJS		=	$(API_OBJS) $(OBJS)
EXEOBJS		=	$(EXE_OBJS) $(OBJS)
ALLOBJS		=	$(EXEOBJS)
OBJS		=	$(GEN_OBJS) $(STATIC_OBJS)

GEN_OBJS	=	NclMultiDValdoubleData.o NclMultiDValfloatData.o \
			NclMultiDValintData.o NclMultiDVallogicalData.o \
			NclMultiDVallongData.o NclMultiDValnclfileData.o \
			NclMultiDValshortData.o NclMultiDValstringData.o \
			NclMultiDValbyteData.o NclMultiDValcharData.o

STATIC_OBJS	=	AddBuiltIns.o AddFileFormats.o AddHLUObjs.o \
			AddIntrinsics.o AttSupport.o DataSupport.o Execute.o \
			FileSupport.o Formats.o InitData.o Machine.o Memory.o \
			NclAtt.o NclData.o NclFile.o \
			NclMultiDValData.o NclMultiDValHLUObjData.o \
			NclNetCdf.o NclVar.o OpsFuncs.o Printtoken.o SrcTree.o \
			Symbol.o Translate.o VarSupport.o NclFileVar.o \
			NclHLUVar.o HLUSupport.o


LibraryTarget($(MYLIB),$(ALLOBJS))
LibraryTarget($(MYLIB_API),$(APIOBJS))
CProgram($(MYBIN),$(EXEOBJS),$(DEPLIBS))
BuildIncludes($(INSTALL_HDRS),ncarg/ncl,../..)
InstallTarget($(INSTALL_HDRS),$(INSTALL_INC),$(NCLINCPATH))

all-local:: makesubdirs
depend-local:: $(GEN_HDRS) $(GEN_SRCS)
DependTarget($(ALLSRCS))

CleanFilesTarget(lex.yy.c y.tab.c y.tab.h)
CleanFilesTarget($(GEN_HDRS) $(GEN_SRCS))

#
# yacc and lex dependancies
#

ioapi.o : io.c
	$(CC) -c $(API_DEFS) $(CFLAGS) io.c -o ioapi.o

NclHLUObjapi.o : NclHLUObj.c
	$(CC) -c $(API_DEFS) $(CFLAGS) NclHLUObj.c -o NclHLUObjapi.o

scanapi.c: scanner.c
	$(CP) scanner.c scanapi.c

scanapi.o: scanapi.c
	$(CC) -c $(API_DEFS) $(CFLAGS) $<

parseapi.c: parser.c
	$(CP) parser.c parseapi.c

parseapi.o: parseapi.c
	$(CC) -c $(API_DEFS) $(CFLAGS) $<

#if	defined(SUN) && (MAJOR == 4)
scanner.c:	lex.yy.c syms_lex.sh
	$(SHELL) syms_lex.sh

parser.h:	y.tab.h syms_tab_h.sh
	$(SHELL) syms_tab_h.sh

parser.c:	y.tab.c syms_tab_c.sh
	$(SHELL) syms_tab_c.sh
#else
scanner.c:	lex.yy.c
	$(CP) lex.yy.c scanner.c

parser.h:	y.tab.h
	$(CP) y.tab.h parser.h

parser.c:	y.tab.c
	$(CP) y.tab.c parser.c
#endif

lex.yy.c: ncl.l
	$(LEX) ncl.l

$(YACC):
	@cd $(YACCDIR); $(MAKE) all

y.tab.c y.tab.h: ncl.y $(YACC)
	$(YACC) -d -t ncl.y

#
# Data Object dependancies
#

#define	MultiDValDataRule_h(type)\
]\
NclMultiDVal/**/type/**/Data.h:	data_h.sh NclMultiDValData.h.sed]\
	@$(SHELL) data_h.sh type]

#define MultiDValDataRule_c(type,xtra_dep)\
]\
NclMultiDVal/**/type/**/Data.c:	type/**/_data_c.sh op_funcs.sh NclMultiDVal/**/type/**/Data.c.specific xtra_dep]\
	@$(SHELL) type/**/_data_c.sh]

#define MultiDValDataRule(type,xtra_dep)\
MultiDValDataRule_h(type)\
MultiDValDataRule_c(type,xtra_dep)

NUM_OP_TMPL	=	NclMultiDValData.c.sed \
			MultiDValSimpleOpTemplate.c.sed \
			MultiDValMonoOpTemplate.c.sed \
			MultiDValSelectOpTemplate.c.sed \
			MultiDValDivOpTemplate.c.sed \
			MultiDValXorOpTemplate.c.sed \
			MultiDValSelectFuncsTemplate.c.sed \
			MultiDValIsMisFuncOpTemplate.c.sed \
			MultiDValFunctionOpTemplate.c.sed \
			MultiDValInitClassTemplate.c.sed \
			MultiDValSelectFuncsTemplate.c.sed

STR_OP_TMPL	=	string_ops.c.sed string_sel.c.sed string_cmp.c.sed \
			MultiDValSelectFuncsTemplate.c.sed

FILE_OP_TMPL	=	NclMultiDValData.c.sed MultiDValSimpleOpTemplate.c.sed \
			MultiDValSelectFuncsTemplate.c.sed \
			MultiDValInitClassTemplate.c.sed


MultiDValDataRule(double,$(NUM_OP_TMPL))
MultiDValDataRule(float,$(NUM_OP_TMPL))
MultiDValDataRule(int,$(NUM_OP_TMPL))
MultiDValDataRule(long,$(NUM_OP_TMPL))
MultiDValDataRule(short,$(NUM_OP_TMPL))
MultiDValDataRule(logical,$(NUM_OP_TMPL))
MultiDValDataRule(string,$(STR_OP_TMPL))
MultiDValDataRule(nclfile,$(FILE_OP_TMPL))
MultiDValDataRule(char,$(NUM_OP_TMPL))
MultiDValDataRule(byte,$(NUM_OP_TMPL))
