#!/bin/csh -f
#
#	$Id: ymake,v 1.7 1993-10-21 17:21:49 haley Exp $
#
######################################################################
#
# Program:	ymake
#
# Purpose:	"ymake" processes a "yMakefile" or "ymakefile"
#		that may have imbedded "cpp" commands. In producing
#		the output file, "Makefile" or "makefile", "ymake"
#		first reads in a "configuration file", based on
#		what the host system is, and then runs the
#		yMakefile/ymakefile through "cpp", thus producing
#		"Makefile" or "makefile". The result is a standard,
#		portable Makefile.
#
#		This mechanism is used for generating a machine-dependent 
#		hierarchy of Makefiles at installation time.
#
#		Warning: this script WILL overwrite the existing
#		Makefile IF a yMakefile exists!
#
# Author:	Don Middleton-Link
#
# Revision History:
#		Created June 1988
#		Revised October 1988 - extensions added for IBM/AIX
#		Moved to Bourne shell version for UNICOS 5.0 beta
#		Revised November 1989
#		Significant re-write/additions to allow an installed
#			version May 93 (boote)
#
# Warning:	This script WILL overwrite the existing
#		Makefile IF a yMakefile exists!
#
######################################################################

set	defines
@ useinstalled = 1

while ($#argv)

	switch ("$argv[1]")

	case	-config:
		shift
		if ($#argv) then
			set config_dir = "$argv[1]"
			set defines = (-I$argv[1] $defines)
			@ useinstalled = 0
		else
			exit 1
		endif
		breaksw

	default:
		set defines = ($defines $argv[1])
		breaksw
	endsw

	shift
end

if($useinstalled != 0) then
	set config_dir = `ncargpath config`
	if ($status != 0) then
		echo "$0 : Unable to find NCARG_CONFIG dir" > /dev/tty
		exit 1
	endif
	set defines = (-I$config_dir -DUseInstalled $defines)
	set bin_dir = `ncargpath bin`
	set lib_dir = `ncargpath lib`
	set defines = ($defines -D_InstBin\=$bin_dir -D_InstLib\=$lib_dir)
	set inc_dir = `ncargpath include`
	set man_dir = `ncargpath man`
	set defines = ($defines -D_InstInc\=$inc_dir -D_InstMan\=$man_dir)
	set tmp_dir = `ncargpath tmp`
	set defines = ($defines -D_InstTmp\=$tmp_dir)
	if ($?YMAKE_DEV_FILE) then
		if (-e $YMAKE_DEV_FILE) then
		set defines=($defines -DYMAKEDEVFILE=\"$YMAKE_DEV_FILE\")
		else
			echo "unable to open YMAKE_DEV_FILE $YMAKE_DEV_FILE"
		endif
	endif
endif


if (-e /usr/ccs/lib/cpp) then
	set cpp = /usr/ccs/lib/cpp
else 
	set cpp = /lib/cpp
endif


set ymakefile
set outfile

set tmp1="ymake.tmp1"
/bin/rm -f $tmp1

if (-e "ymakefile") then
	set ymakefile="ymakefile"
	set outfile = "makefile"
else if (-e "yMakefile") then
	set ymakefile="yMakefile"
	set outfile = "Makefile"
else
	echo "$0 : no y(mM)akefile found" > /dev/tty
	exit 1
endif

set defines=($defines -DYMAKESRCFILE=$ymakefile)

if (-e $outfile) then
	if (-e $outfile.bak) then
		/bin/rm -f $outfile.bak
	endif
	cp $outfile $outfile.bak
endif

onintr error_cleanup

# Determine the hostname of the machine, create a definition
# for it, and pass that to "cpp" so that yMakefiles can key
# off of it. This is used to install local host-specific
# configuration options permanently with the distribution.

set hostname

if (-e /bin/hostname) then
	set hostname    = `/bin/hostname`
endif

if (-e /usr/bsd/hostname) then
	set hostname    = `/usr/bsd/hostname`
endif

set hostname=host$hostname

set defines=($defines -D$hostname)

#
#	Figure out what kind of system we are on. We need to know the OS
#	and the machine architecture. 
#
set foo = `/bin/uname -s`
if ($status != 0) then
	echo "$0 : Unknown operating system" > /dev/tty
	exit 1
endif
set mach = `/bin/uname -m`
if ($status != 0) then
	echo "$0 : Unkown maching type" > /dev/tty
	exit 1
endif

switch ("$foo")
case SunOS:
case AIX:
case IRIX:
case ULTRIX:
case HP-UX:
case OSF1:
        set opsys = $foo
        breaksw
default:
        set foo = `/bin/uname -m`
        if ($status != 0) exit 1
        switch ("$foo")
        case    CRAY*
                set opsys = UNICOS
                breaksw
        default:
                echo "$0 : system unknown" > /dev/tty
                exit 1
        endsw
        breaksw
endsw

switch ("$opsys")
case	SunOS:
	set foo = `/bin/uname -r`
	if ($status != 0) exit 1

	switch ("$foo")
	case	5*:
		set os = Solaris
		breaksw
	default:
		set os = $opsys
		breaksw
	endsw

	switch ("$mach")
	case	sun4*:
		set arch = sun4
		breaksw
	case	sun3*:
		set arch = sun3
		breaksw
	case	sun2*:
		set arch = sun2
		breaksw
	default:
		echo "$0 : Unkown machine type" > /dev/tty
		exit 1
	endsw
	breaksw

case	AIX:
	set os = $opsys

	switch ("$mach")
	case	00*:
		set arch = RS6000
		breaksw
	default:
		echo "$0 : Unknown machine type" > /dev/tty
		exit 1
	endsw
	breaksw

case	IRIX:
	set os = $opsys

	switch ("$mach")
	case	IP*:
		set arch = IP
		breaksw
	default:
		echo "$0 : Unknown machine type" > /dev/tty
		exit 1
	endsw
	breaksw

case	ULTRIX:
case	OSF1:
	set os = $opsys
	set arch = $mach
	breaksw

case	HP-UX:
	set os = HPUX

	switch ("$mach")
	case	9000/7*:
		set arch = HP9000_7xx
		breaksw
	default:
		echo "$0 : Unknown machine type" > /dev/tty
		exit 1
	endsw
	breaksw

case	UNICOS:
	set os = $opsys

	switch ("$mach[2]")
	case	Y*:
		set arch = YMP
		breaksw
	default:
		echo "$0 : Unknown machine type" > /dev/tty
		exit 1
	endsw
	breaksw

default:
	set os = $opsys
	set arch = $mach
	breaksw
endsw

#
#	add os and arch to our defines list
#
set defines=($defines -D$os -D$arch)


# Leave the cpp commands unmolested but insert a C null comment
# in front of Makefile comment lines.  cpp will later remove these
# restoring the original form (plus a few blank lines).
# Also check for a tab followed by a # - that should be a saber target
# so insert a C null comment for them as well.

sed <$ymakefile >! $tmp1 \
	-e '/^#[ 	]*if/b' \
	-e '/^#[ 	]*ifdef/b' \
	-e '/^#[ 	]*ifndef/b' \
	-e '/^#[ 	]*else/b' \
	-e '/^#[ 	]*elif/b' \
	-e '/^#[ 	]*endif/b' \
	-e '/^#[ 	]*define/b' \
	-e '/^#[ 	]*undef/b' \
	-e '/^#[ 	]*line/b' \
	-e '/^#[ 	]*include/b' \
	-e '/^#/s$$/**/_COMMENT_&$' \
	-e '/^	#/s$$/**/_COMMENT_&$'

cat <<'EOF' >! $outfile
#######################################################################
#
#	This Makefile was created by the "ymake" utility.
#	If you wish to make changes in the "Makefile" or "makefile", 
#	do so by making changes to "yMakefile" or "ymakefile" 
#       and executing "make local-Makefile".
#
#######################################################################

'EOF'

echo '#include "Template"' | \
$cpp -I. -D_COMMENT_="" $defines -DYMAKEFILE=\"$tmp1\" | \
"$config_dir"/ymake-filter >>$outfile

/bin/rm -f $outfile.bak $tmp1
onintr
exit 0

error_cleanup:
echo ""
echo "Error in <ymake>: Interrupted in" `pwd` "- restoring $outfile"
/bin/rm -f $outfile $tmp1
cp $outfile.bak $outfile
/bin/rm -f $outfile.bak
exit 1
onintr
