/*
 *	$Id: Rules,v 1.17 1994-03-03 15:43:42 haley Exp $
 */
/* 
   This file contains Makefile macros.  Proper spacing is achieved
   through the use of the right square brackets, which are later expanded
   into appropriate newlines and tabs by "ymake-filter".
*/

#define	NullArgument

/*
 * Macro:	PrintError
 *
 * Description:	This macro is used to report any rules that are in a yMakefile
 *		that are out of date.
 */
#ifndef	PrintError
#define PrintError(rule,rulename,message)\
]\
rule:]\
	@echo -n "YMAKE Error-"rulename "used in $(CURRENT_DIR)/yMakefile "]\
	@echo message]\
]\
Makefiles:: rule]
#endif	/* PrintError */

/*
 * Macro:	InternalMakefileTarget
 *
 * Description:	yMake uses this internally in the Template file - It should
 *		not be used in an actual yMakefile.
 */
#ifndef	InternalMakefileTarget
#define InternalMakefileTarget\
]\
YmakeDependency(local-Makefile)\
]\
local-Makefile::]\
	@echo "Making Makefile in $(CURRENT_DIR)"]\
	@$(YMAKE) -Topdir $(TOP) -Curdir $(CURRENT_DIR)]\
]\
me: local-Makefile]
#endif	/* InternalMakefileTarget */

/*
 * Macro:	InstallTarget
 *
 * Description:	install a number of files to dest - It will try and create
 *		dest if it doesn't currently exist. The all is there so that
 *		install doesn't end up being the default target since nothing
 *		should be installed on an all target.
 */
#ifndef	InstallTarget
#define InstallTarget(names, mode, dest)\
]\
all-local:: names]\
]\
install-local:: names]\
	MakeDir(dest)]\
	@for name in names; do\]\
	(echo "Installing $$name";\]\
	$(INSTALL) -m mode $$name dest);\]\
	done]
#endif	/* InstallTarget */

/*
 * Macro:	InstallLibTarget
 *
 * Description:	Install a library - It installs the lib and then runs RANLIB.
 */
#ifndef	InstallLibTarget
#define InstallLibTarget(library)\
InstallTarget(library,$(INSTALL_LIB),$(LIBPATH))\
]\
install-local::]\
	$(RANLIB) $(LIBPATH)/library]
#endif	/* InstallLibTarget */

/*
 * Macro:	InternalMakeSubdirs
 *
 * Description:	ymake uses this rule internally in Template - It should not
 *		be used in an actual yMakefile.
 */
#ifndef	InternalMakeSubdirs
#define InternalMakeSubdirs(dirs)\
]\
makesubdirs:]\
	@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir; echo "Making $(CURRENT_DIR)/$$dir";\]\
	$(MAKE) $(MFLAGS));\]\
	else echo "NOT Making $(CURRENT_DIR)/$$dir"; fi \]\
	done]\
]\
all:: all-local makesubdirs]
#endif	/* InternalMakeSubdirs */

/*
 * Macro:	InternalCleanSubdirs
 *
 * Description:	ymake uses this rule internally in Template - It should not
 *		be used in an actual yMakefile.
 */
#ifndef	InternalCleanSubdirs
#define InternalCleanSubdirs(dirs)\
]\
clean:: clean-local]\
	-@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir;\]\
	$(MAKE) $(MFLAGS) clean);\]\
	else echo "NOT Cleaning $(CURRENT_DIR)/$$dir"; fi \]\
	done]
#endif	/* InternalCleanSubdirs */

/*
 * Macro:	InternalDistCleanSubdirs
 *
 * Description:	ymake uses this rule internally in Template to totally clean
 *		the distribution - including Makefiles.
 */
#ifndef	InternalDistCleanSubdirs
#define	InternalDistCleanSubdirs(dirs)\
]\
dist-clean:: clean-local]\
	-@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir; $(MAKE) $(MFLAGS) dist-clean);\]\
	else echo "NOT dist-cleaning $(CURRENT_DIR)/$$dir"; fi \]\
	done]\
	@$(RM) Makefile]\
	@echo "dist-clean in $(CURRENT_DIR)"]\

#endif	/* InternalDistCleanSubdirs */

/*
 * Macro:	InternalInstallSubdirs
 *
 * Description:	ymake uses this rule internally in Template - It should not
 *		be used in an actual yMakefile.
 */
#ifndef	InternalInstallSubdirs
#define InternalInstallSubdirs(dirs)\
]\
install:: install-local]\
	@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir;\]\
	$(MAKE) $(MFLAGS) install);\]\
	else echo "NOT installing $(CURRENT_DIR)/$$dir"; fi \]\
	done]
#endif	/* InternalInstallSubdirs */

/*
 * Macro:	YmakeDependency
 *
 * Description:	ymake uses this rule internally to build ymake if it isn't
 *		built.
 */
#ifndef	YmakeDependency
#ifdef	UseInstalled
#define	YmakeDependency(target) /**/
#else
#define	YmakeDependency(target)\
target:: $(YMAKEDEP)]\
]\
$(YMAKEDEP):]\
	@(cd $(CONFIGSRC); if (test -f Makefile) then \]\
	echo "checking ymake in $(CONFIGSRC) first..."; $(MAKE) all; else \]\
	echo "making ymake from Makefile.ini in $(CONFIGSRC) first..."; \]\
	$(MAKE) -f Makefile.ini clean all; fi; \]\
	echo "continuing in $(CURRENT_DIR)")]
#endif	/* UseInstalled */
#endif	/* YmakeDependency */

/*
 * Macro:	InternalMakefilesSubdirs
 *
 * Description:	ymake uses this rule internally in Template - It should not
 *		be used in an actual yMakefile.
 */
#ifndef	InternalMakefilesSubdirs
#define InternalMakefilesSubdirs(dirs)\
]\
Makefiles::]\
	@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir; echo "Making Makefiles in $(CURRENT_DIR)/$$dir";\]\
	$(NEWYMAKE) -Topdir ../$(TOP) -Curdir $(CURRENT_DIR)/$$dir;\]\
	$(MAKE) $(MFLAGS) Makefiles);\]\
	else echo "NOT Making Makefiles in $(CURRENT_DIR)/$$dir"; fi \]\
	done]\
]\
Makefiles-local::]\
	@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir; echo "Making Makefile in $(CURRENT_DIR)/$$dir";\]\
	$(NEWYMAKE) -Topdir ../$(TOP) -Curdir $(CURRENT_DIR)/$$dir;)\]\
	else echo "NOT Making Makefile in $(CURRENT_DIR)/$$dir"; fi \]\
	done]
#endif	/* InternalMakefilesSubdirs */

/*
 * Macro:	RelocatableTarget
 *
 * Description:	Builds a .o and installs it in the ROBJPATH.
 */
#ifndef	RelocatableTarget
#define RelocatableTarget(name,objects)\
]\
all-local::	name]\
]\
name:	objects]\
	@$(LD_REL) -r -o name objects]\
]\
InstallTarget(name,$(INSTALL_LIB),$(ROBJPATH))\
CleanFilesTarget(name objects)
#endif	/* RelocatableTarget */

/*
 * Macro:	FortranProgram
 *
 * Description:	This rule is basically the same as FortranTarget but it
 *		allows you to specify dependent libraries - so a make all
 *		will rebuild if the library has been updated.
 */
#ifndef	FortranProgram
#define FortranProgram(program,objects,deplibs)\
_FortranLinkProgram(program,objects,deplibs)\
InstallTarget(program,$(INSTALL_BIN),$(BINPATH))
#endif	/* FortranProgram */

/*
 * Macro:	FortranTarget
 *
 * Description:	This rule is build's and installs a Fortran program - if
 *		possible the FortranProgram rule should be used instead so
 *		the program will re-build if the libraries are rebuilt.
 */
#ifndef	FortranTarget
#define FortranTarget(program,objects)\
_FortranLinkProgram(program,objects,NullArgument)\
InstallTarget(program,$(INSTALL_BIN),$(BINPATH))
#endif	/* FortranTarget */

/*
 * Macro:	_FortranLinkProgram
 *
 * Description:	This rule is used to link a fortran program - it may be
 *		different for each archectecture so that shared-nonshared
 *		libraries can be linked properly.
 */
#ifndef	_FortranLinkProgram
#define	_FortranLinkProgram(program,objects,deplib)\
]\
all-local:: program]\
]\
program: objects deplib]\
	$(F77_LD) $(FC_LDOPTIONS) -o program objects $(PROG_LIBS) $(LDLIBS) $(EXTRA_LDLIBS)]\
]\
CleanFilesTarget(program objects)
#endif	/* _FortranLinkProgram */


/*
 * Macro:	FNotInstalledTarget
 *
 * Description:	This rule is used to build a fortran program that is used
 *		in the distribution, but should not be installed.
 */
#ifndef	FNotInstalledTarget
#define	FNotInstalledTarget(program,objects)\
_FortranLinkProgram(program,objects,NullArgument)
#endif	/* FNotInstalledTarget */


/*
 * Macro:	CProgram
 *
 * Description:	This rule is basically the same as CTarget but it
 *		allows you to specify dependent libraries - so a make all
 *		will rebuild if the library has been updated.
 */
#ifndef	CProgram
#define	CProgram(program,objects,deplibs)\
_CLinkProgram(program,objects,deplibs)\
]\
InstallTarget(program,$(INSTALL_BIN),$(BINPATH))
#endif	/* CProgram */

/*
 * Macro:	CTarget
 *
 * Description:	This rule is build's and installs a C program - if
 *		possible the CProgram rule should be used instead so
 *		the program will re-build if the libraries are rebuilt.
 */
#ifndef	CTarget
#define CTarget(program,objects)\
_CLinkProgram(program,objects,NullArgument)\
InstallTarget(program,$(INSTALL_BIN),$(BINPATH))
#endif	/* CTarget */

/*
 * Macro:	_CLinkProgram
 *
 * Description:	This rule is used to link a C program - It may be different
 *		for each architecture to resolve the differences in linking
 *		some libraries statically and some dynamically on different
 *		systems.
 */
#ifndef	_CLinkProgram
#ifndef	AIX
#define	_CLinkProgram(program,objects,deplib)\
]\
all-local:: program]\
]\
program: objects deplib]\
	$(CC_LD) $(CC_LDOPTIONS) -o program objects $(PROG_LIBS) $(CSTATIC) $(LDLIBS) $(CDYNAMIC) $(EXTRA_LDLIBS)]\
]\
CleanFilesTarget(program objects)
#else	/* AIX	*/
#define	_CLinkProgram(program,objects,deplib)\
]\
all-local::	program]\
]\
program: program.nonshr.o]\
	$(CC_LD) $(CC_LDOPTIONS) $(CDYNAMIC) -o program program.nonshr.o $(EXTRA_LDLIBS)]\
]\
program.nonshr.o: objects deplib]\
	$(LD) -r $(CSTATIC) -bhalt\:4 -o program.nonshr.o objects $(PROG_LIBS) $(LDLIBS)]\
]\
CleanFilesTarget(program program.nonshr.o objects)
#endif	/* AIX	*/
#endif	/* _CLinkProgram */

/*
 * Macro:	CNotInstalledTarget
 *
 * Description:	This rule is used to build a C program that is used
 *		in the distribution, but should not be installed.
 */
#ifndef	CNotInstalledTarget
#define	CNotInstalledTarget(program,objects)\
_CLinkProgram(program,objects,NullArgument)
#endif	/* FNotInstalledTarget */

/*
 * Macro:	LibraryTarget
 *
 * Description:	This rule is build's and installs a library.
 */
#ifndef	LibraryTarget
#define LibraryTarget(library,objects)\
]\
all-local:: library]\
]\
library:: objects]\
	-$(RM) library]\
	@$(AR_QUICK) library objects]\
	$(RANLIB) library]\
]\
InstallLibTarget(library)]\
CleanFilesTarget(library objects)
#endif	/* LibraryTarget */

/*
 * Macro:	SourceLibraryTarget
 *
 * Description:	This rule is build's and installs a source library.
 */
#ifndef	SourceLibraryTarget
#ifdef  BuildNCARGSourceLibrary
#define	SourceLibraryTarget(name,library,sources)\
all-local:: library]\
]\
library:: sources]\
	@echo sources > name;\]\
	$(RM) library;\]\
	$(AR_SRC_QUICK) library name sources;\]\
	$(RANLIB) library;\]\
	$(RM) name]\
]\
.F.f:]\
	@$(FCPP) $< $*.f]\
]\
InstallLibTarget(library)\
CleanFilesTarget(library)
#else	/* BuildNCARGSourceLibrary */
#define SourceLibraryTarget(name,library,sources) /**/
#endif	/* BuildNCARGSourceLibrary */
#endif	/* SourceLibraryTarget */

/*
 * Macro:	PartialSourceLibraryRoot
 *
 * Description:	PartialSourceLibraryRoot is used to manage the source library
 *		created in this directory by all the subdirs.  Each of the
 *		sub-dirs should be using the PartialSourceLibraryTarget rule.
 */
#ifndef	PartialSourceLibraryRoot
#ifdef	BuildNCARGSourceLibrary
#define PartialSourceLibraryRoot(library,dirs)\
PartialLibraryRoot(library,dirs)
#else	/* BuildNCARGSourceLibrary */
#define PartialSourceLibraryRoot(library,dirs)	/**/
#endif	/* BuildNCARGSourceLibrary */
#endif	/* PartialSourceLibraryRoot */

/*
 * Macro:	PartialSourceLibraryTarget
 *
 * Description:	This rule is build's a source library in the directory
 *		directly above it.  The directory above should be using
 *		the PartialSourceLibraryRoot rule.
 */
#ifndef	PartialSourceLibraryTarget
#ifdef  BuildNCARGSourceLibrary
#define PartialSourceLibraryTarget(name,library,sources)\
all-local:: ../library]\
]\
../library: sources]\
	@echo sources > name]\
	$(AR_SRC_QUICK) ../library name sources]\
	$(RM) name]\
]\
.F.f:]\
	@$(FCPP) $< $*.f]
#else	/* !BuildNCARGSourceLibrary */
#define PartialSourceLibraryTarget(name,library,sources) /**/
#endif	/* BuildNCARGSourceLibrary */
#endif	/* PartialSourceLibraryTarget */

/*
 * Macro:	CleanFilesTarget
 *
 * Description:	Removes the given files.
 */
#ifndef	CleanFilesTarget
#define CleanFilesTarget(files)\
]\
clean-local::]\
	-@$(RM) files]
#endif	/* CleanFilesTarget */

/*
 * Macro:	PartialLibraryTarget
 *
 * Description:	This rule builds a library in the directory directly above
 *		it with the same name as the current directory. The directory
 *		above should be using the PartialLibraryRoot rule.
 */
#ifndef	PartialLibraryTarget
#define PartialLibraryTarget(library,objects)\
]\
all-local::../library]\
]\
../library:: objects]\
	$(AR_REG) ../library objects]\
]\
CleanFilesTarget(objects)
#endif	/* PartialLibraryTarget */

/*
 * Macro:	PartialLibraryRoot
 *
 * Description:	PartialLibraryRoot is used to manage the library created
 *		in this directory by all the subdirs.  Each of the sub-dirs
 *		should be using the PartialLibraryTarget rule.
 */
#ifndef	PartialLibraryRoot
#define PartialLibraryRoot(library,dirs)\
]\
all-local:: library]\
]\
library::]\
	@echo "Making in dirs First..."]\
]\
library:: makesubdirs]\
	@echo "Continuing in $(CURRENT_DIR)"]\
]\
library::]\
	$(RANLIB) library]\
]\
InstallLibTarget(library)\
CleanFilesTarget(library)
#endif	/* PartialLibraryRoot */

/*
 * Macro:	HLUExampleTarget
 *
 * Description:	Sources for HLUExampleTarget are any file that needs to be
 *		copied to the HLUEXPATH - currently only $name.h $name.data
 *		Makefile.$name and $name.resfile are supported by the nhlex
 *		script.
 */
#ifndef	HLUExampleTarget
#define HLUExampleTarget(program,objects,sources)\
CNotInstalledTarget(program,objects)\
InstallTarget(program, $(INSTALL_BIN), $(HLUEXPATH))\
InstallTarget(sources, $(INSTALL_INC), $(HLUEXPATH))
#endif	/* HLUExampleTarget */

/*
 * Macro:	DependTarget
 *
 * Description:	This rule is used to add dependencies to the Makefile.
 */
#ifndef	DependTarget
#define	DependTarget(srcs)\
depend-local:: srcs]\
	$(DEPEND) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- srcs
#endif /* DependTarget */

/*
 * Macro:	InternalDependSubdirs
 *
 * Description:	Used internally in ymake - It should not be used in a yMakefile.
 */
#ifndef	InternalDependSubdirs
#define InternalDependSubdirs(dirs)\
]\
depend:: depend-local]\
	@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir; echo "Depending $(CURRENT_DIR)/$$dir";\]\
	$(MAKE) $(MFLAGS) depend);\]\
	else echo "NOT Depending in $(CURRENT_DIR)/$$dir"; fi; \]\
	done]
#endif	/* InternalDependSubdirs */

/*
 * Macro:	MakeDir
 *
 * Description:	This rule creates a directory - if a parent dir doesn't exist
 *		it attempts to create it.
 */
#ifndef	MakeDir
#define	MakeDir(dir)	@if (test ! -d dir); then ($(MKDIRHIER) dir); else continue; fi
#endif

/*
 * Macro:	BuildIncludes
 *
 * Description:	This rule creates a symbolic include tree that point to
 *		the current directory.  It allows the dependancies to work
 *		by only re-compiling if the header file in the current
 *		directory has changed.
 */
#ifndef	BuildIncludes
#define	BuildIncludes(srclist,dstsubdir,dstupdir)\
]\
includes-local::]\
	MakeDir($(BUILDINCDIR)/dstsubdir)]\
	@cd $(BUILDINCDIR)/dstsubdir;\]\
	$(RM) srclist; \]\
	for i in srclist; do \]\
	(echo "$(LN) dstupdir/$(BUILDINCTOP)/$(CURRENT_DIR)/$$i .";\]\
	$(LN) dstupdir/$(BUILDINCTOP)/$(CURRENT_DIR)/$$i .;)\]\
	done]
#endif	/* BuildIncludes */

/*
 * Macro:	InternalIncludesSubdirs
 *
 * Description:	Used internally in ymake - It should not be used in a yMakefile.
 */
#ifndef	InternalIncludesSubdirs
#define	InternalIncludesSubdirs(dirs)\
]\
includes:: includes-local]\
	@for dir in dirs ; do \]\
	if (test -d $$dir) then \]\
	(cd $$dir; echo "including in $(CURRENT_DIR)/$$dir";\]\
	$(MAKE) $(MFLAGS) includes);\]\
	else echo "NOT including in $(CURRENT_DIR)/$$dir"; fi;\]\
	done]
#endif	/* InternalIncludesSubdirs */

/*
 * Macro:	InstallManPages
 *
 * Description:	This rule is used to install a manpage
 */
#ifndef InstallManPages
#define InstallManPages(files,suffix,destdir,section)\
]\
all-local::]\
]\
install-local::]\
	MakeDir(destdir)]\
	@for file in files; do \]\
	echo "Installing $${file}.section"; \]\
	$(INSTALL) -m $(INSTALL_MAN) $${file}suffix destdir/$${file}.section;\]\
	done
#endif	/* InstallManPages */

/*
 * Macro:	InstallManPageAliases
 *
 * Description:	* This rule is used to install man page aliases
 */
#ifndef InstallManPageAliases
#define InstallManPageAliases(file,destdir,section,aliases)\
]\
all-local::]\
]\
install-local:: destdir/file.section]\
	@(cd destdir;\]\
	for alias in aliases ; do \]\
	$(RM) $$alias.section;\]\
	echo "Installing $$alias.section";\]\
	$(LN) file.section $$alias.section;\]\
	done)]
#endif	/* InstallManPageAliases */

/*
 * Macro:	FormatManPages
 *
 * Description:	This rule is used to create preformatted man pages
 */
#ifndef	FormatManPages
#define	FormatManPages(manpages,mansuffix,catsuffix)\
]\
preformatted::]\
	@for name in manpages; do \]\
	echo "Formatting $${name}mansuffix";\]\
	$(TBL) $${name}mansuffix | $(NROFF) | $(COL) > $${name}catsuffix;\]\
	done]
#endif	/* FormatManPages */

/*
 * Macro:	InstallXappFiles
 *
 * Description:	This rule is used to install X app defaults files - It gives
 *		a warning if it is overriding an existing file and moves
 *		that file to "file".bak in case there are local mods to
 *		the file.
 */
#ifndef	InstallXappFiles
#define	InstallXappFiles(appfiles)\
]\
all-local::]\
]\
install-local::]\
	MakeDir($(XAPPPATH))]\
	@for name in appfiles; do \]\
	if (test -f $(XAPPPATH)/$$name) then \]\
		echo "Warning - replacing $(XAPPPATH)/$$name"; \]\
		$(MV) $(XAPPPATH)/$$name $(XAPPPATH)/$$name.bak ; else continue; fi; \]\
	(echo "Installing $$name.ad"; \]\
	$(INSTALL) -m $(INSTALL_APP) $$name.ad $(XAPPPATH)/$$name); \]\
	done]
#endif	/* InstallXappFiles */
