.\" The first line of this file must contain the '\"[e][r][t][v] line
.\" to tell man to run the appropriate filter "t" for table.
.\"
.\"	$Id: ymake.man,v 1.3 1993-10-19 17:14:10 boote Exp $
.\"
.\"######################################################################
.\"#									#
.\"#			   Copyright (C)  1993 				#
.\"#	     University Corporation for Atmospheric Research		#
.\"#			   All Rights Reserved				#
.\"#									#
.\"######################################################################
.\"
.\"	File:		ymake.man
.\"
.\"	Author:		Jeff W. Boote
.\"			National Center for Atmospheric Research
.\"			PO 3000, Boulder, Colorado
.\"
.\"	Date:		Mon Jun 14 17:10:14 1993
.\"
.\"	Description:	This file explains what ymake is, and how to use it.
.\"
.ps 12
.TH ymake 1NCARG "June 1993" "NCAR Graphics Local" "NCAR Graphics"
.SH NAME
.nh
ymake \- C preprocessor interface to the \fBmake\fP utility
.ny
.SH SYNOPSIS
\fBymake\fP [ \fB\-D\fP\fIdefine\fP ] [ \fB\-I\fP\fIdir\fP ]
.SH OPTIONS
The following command line options may be passed to \fBymake\fP:
.TP 8
.B \-D\fIdefine\fP
This option is passed directly to \fBcpp\fP.  It is typically used to set
directory-specific variables.  For example, the NCAR Graphics distribution uses
this flag to set \fITOPDIR\fP to the name of the directory containing the top
of the distribution and \fICURDIR\fP to the name of the current 
directory, relative to the top.
.TP 8
.B \-I\fIdirectory\fP
This option is passed directly to \fBcpp\fP.  It is typically used to 
indicate the directory in which the \fBymake\fP template and configuration
files may be found.
.SH DESCRIPTION
.B ymake
is used to 
generate \fIMakefiles\fP from a template, a set of \fBcpp\fP macro functions,
and a per-directory input file called a \fIyMakefile\fP.  This allows machine
dependencies (such as compiler options, alternate command names, and special
\fBmake\fP rules) to be kept separate from the descriptions of the
various items to be built. \fBymake\fP is usually used from withing the
NCAR Graphics source distribution tree.  When it is used in this way, it
and all of the configuration files listed below can be found in the config
subdirectory.  \fBymake\fP can also be used from the systems bin directory.
When it is used in this way, it uses the \fINCARG_ROOT\fP environment
variable to find the configuration files in
.I $(NCARG_ROOT)/lib/ncarg/config.
.SH "HOW IT WORKS"
\fBymake\fP invokes \fBcpp\fP with any \fB\-I\fP or \fB\-D\fP flags passed
on the command line and passes it the following line:
.sp
.nf
	#include Template
.fi
.sp
.PP
The Template file reads in a file containing machine-dependent parameters 
(specified as \fBcpp\fP symbols), a site-specific parameters file,
a file defining variables, a file
containing \fBcpp\fP macro functions for generating \fBmake\fP rules, and
the \fIyMakefile\fP in the current directory.  Additionally, if \fBymake\fP is
being used from the bin directory, and the environment variable
\fIYMAKE_DEV_FILE\fP is set to an existing file, that file is read in directly
before the \fIyMakefile\fP.
.PP
The \fIyMakefile\fP uses the macro functions to indicate what
targets should be built; \fBymake\fP takes care of generating the appropriate
rules.
.PP
.I yMakefiles
contain two types of variables, \fBymake\fP variables
and \fBmake\fP variables.  The \fBymake\fP variables are interpreted by
\fBcpp\fP when
.B ymake
is run.  By convention they are mixed case.  The \fBmake\fP variables are
written into the
.I Makefile
for later interpretation by
.B make.
By convention
.B make
variables are upper case.
.PP
The rules file (named \fIRules\fP in the configuration directory) contains a
variety of \fBcpp\fP macro functions that are
configured according to the current platform.  \fBymake\fP replaces 
any occurrences of the string ``]'' with a newline to allow macros that
generate more than one line of \fBmake\fP rules.  
For example, the macro
.ta 1i 1.6i 5i
.nf

#ifndef	CleanFilesTarget
#define	CleanFilesTarget(files)\e
]\e
clean::]\e
	-@$(RM) files]
#endif	/* CleanFilesTarget */

.fi
when called with
.I "CleanFilesTarget(foo foo1.o foo2.o)"
will expand to
.nf

clean::
	-@$(RM) foo foo1.o foo2.o

.fi
.ta
.PP
On systems whose \fBcpp\fP reduces multiple tabs and spaces to a single
space, \fBymake\fP attempts to put back any necessary tabs (\fBmake\fP is
very picky about the difference between tabs and spaces).  For this reason,
colons (:), and equals (=) in command lines must be preceded by a
backslash (\\).
.SH "USE IN NCAR GRAPHICS DISTRIBUTION"
The NCARG distribution uses \fBymake\fP extensively for builds
within the source tree.  It is also useful to build portions of the source tree
or even external software, if it is used from the bin directory.
As mentioned above,
two special variables, \fITOPDIR\fP and \fICURDIR,\fP are set to make
referencing files using relative path names easier.  For example, the
following command is generated automatically to build the \fIMakefile\fP in
the directory \fIncarg2d/src/libncargC\fP (relative to the top of the sources):
.sp
.nf
%  ../../.././config/ymake -config ../../.././config \\
	-DTOPDIR\=../../../. -DCURDIR\=./ncarg2d/src/libncargC
.fi
.sp
The \fIconfig\fP option to \fBymake\fP is used to tell \fBymake\fP that it
is being involked from within the NCAR Graphics full source tree.  It should
only be used by the \fIMakefile.ini\fP and \fIMakefile\fP files in the NCAR
Graphics full source tree.
.SH "USE OUTSIDE OF NCAR GRAPHICS DISTRIBUTION"
When building programs outside the full source tree \fBymake\fP can be
called without any options from the systems NCARG bin directory (Usually
$(NCARG_ROOT)/bin).
The typical way it would be used, is to go to the top directory of your
source tree and then execute
.B ``ymake''.
This will create a \fIMakefile\fP in your top-level directory.
This \fIMakefile\fP should be used to create all the other \fIMakefiles\fP
and to build the source tree.  This would be done by executing
.B ``make Makefiles''
(to build Makefiles in the subdirectories),
.B ``make includes''
, and
.B ``make depend''.
Once you have done this, all the \fIMakefiles\fP in the source tree should
be created and have dependencies built into them.
.PP
Additionally, when you are using \fBymake\fP from the system's bin directory,
you can set the environment variable \fI$(YMAKE_DEV_FILE)\fP to an additional
configuration file that you provide.  The \fIYMAKE_DEV_FILE\fP gets
included into the \fIMakefile\fP directly before the \fIyMakefile\fP so it
can over-ride any symbols set by \fBymake\fP except those set directly in
the \fIyMakefile\fP.
This file is used by developers to override the values of some of the
\fBmake\fP symbols defined by \fBymake\fP.  For example, if you are working on
some of the functions in libncarg_gks.a, then you would probably want to
redefine the \fBmake\fP symbol \fINCARGGKSLIB\fP.  By default it would be set:
.ta 1i 2.5i 3i
.sp
.nf
	NCARGGKSLIB	=	-lncarg_gks
.fi
.sp
.PP
If you are working on this library, you would override this symbol by
putting the following line in the \fIYMAKE_DEV_FILE\fP so your \fIMakefiles\fP
use your working version of the library:
.sp
.nf
	NCARGGKSLIB	=	my_dev_dir/libncarg_gks.a
.fi
.sp
.ta
.PP
There are some make symbols that are reserved for use in the
\fIYMAKE_DEV_FILE\fP.  They make it possible to configure the way
programs are compiled and linked:
.IP \fIDEV_DEFINES\fP 1.5i
This symbol is used to add additional "-D" flags to the compile line.
.IP \fIDEV_INCLUDES\fP 1.5i
This symbol is used to add additional "-I" flags to the compile line.  These
flags get added to the front of the compile line so they will take precedence
over the other "-I" flags.
.IP \fIDEV_LIB_SEARCH\fP 1.5i
This symbol is used to add additional "-L" flags to the link line.  These
flags get added to the front of the link line so they will take precedence
over the other "-L" flags.
.SH "INPUT FILES"
Here is a summary of the files read by
.B ymake.
.nf
.sp
.ta 2.5i
    Template	generic variables
    Site	site-specific, FirstSite defined
    Architecture	machine-specific
    Site	site-specific, SecondSite defined
    Project	NCARG-specific variables
    Rules	rules
    DevelopersFile	developers override file
    yMakefile	per-directory control file
.fi
.LP
The Template file determines which Architecture file needs to be included and
includes all the other files.  It also provides defaults for the generic
variables.
.LP
The Site file is used to provide Site specific definitions.  For example,
this is the place the installer would set the install directories.  That
way, they use that same directory for all the architectures.  If the installer
wants different directories they can provide different values for the NcargRoot
variable in \fBcpp\fP conditionals.  There is a \fBcpp\fP symbol defined for
each type of architecture for this type of conditional.
Note that \fISite\fP file gets included twice, once before the
\fIArchitecture\fP file and once after.  Although most site customizations
should be specified after the \fIArchitecture\fP file, some, such as the
choice of compiler, need to be specified before, because
variable settings in the \fIArchitecture\fP may depend on them.
(There are currently no cases of this.)
.LP
The first time \fISite\fP file is included, the variable \fIFirstSite\fP
is defined, and the second time, the variable \fISecondSite\fP is
defined.  All code in \fISite\fP should be inside a \fBcpp\fP conditional for
one of these symbols.
.LP
The \fIArchitecture\fP file sets Architecture specific \fBcpp\fP symbols.  There
is a separate \fIArchitecture\fP file for each Machine/Operating System
combination supported by \fBymake\fP.  These
files should only set variables that are different from the defaults.
.LP
The \fIProject\fP file sets defaults for all the NCAR Graphics specific
variables.
For example this is where all the \fBmake\fP symbols that point to specific
libraries are set.
.LP
The \fIRules\fP file contains all the \fBcpp\fP macros that are used in the
\fIyMakefiles\fP.  There is a complete list of these rules, as well as their
parameters, in config/README.
.LP
The \fIDevelopersFile\fP is a file specified by the YMAKE_DEV_FILE environment
variable.  It is only included if \fBymake\fP is being used from the bin
directory.  This file is used to override the default \fBmake\fP symbols set
in any of the above files for development purposes.  The \fBcpp\fP symbols
that are used to set the Optimization flags can also be set in this file.
For example, the
.I #define DEBUG
line can go in this file, and all \fIMakefiles\fP created using
it will use the debugging Optimization flags.
.SH "NCAR GRAPHICS LIBRARY SYMBOLS"
The following list of \fBmake\fP symbols are defined by \fBymake\fP.  These
should be used in \fIyMakefiles\fP instead of specifying the file
with a direct path name or "\-l" flag.
.LP
.ta 1.5i
\fINCARGLOCLIB\fP	libncarg_loc.a
.br
\fINCARGCLIB\fP	libncarg_c.a
.br
\fINCARGLIB\fP	libncarg.a
.br
\fICNCARGLIB\fP	libncargC.a
.br
\fINCARGGKSLIB\fP	libncarg_gks.a
.br
\fICNCARGGKSLIB\fP	libncarg_gksC.a
.br
\fICGMLIB\fP	libcgm.a
.br
\fINCARGRASLIB\fP	libncarg_ras.a
.br
\fIHLULIB\fP	libhlu.a
.br
\fIHLUUTILLIB\fP	libhlu_util.a
.br
\fICTRANSLIB\fP	libctrans.o
.br
\fIICTRANSLIB\fP	libictrans.o
.br
\fIICTRANS_LIB\fP	libictrans_.o
.LP
Additionally, the following symbols have been defined that combine the above
\fBmake\fP symbols into the groups they are usually used in:
.IP \fINCARGLIBS\fP 1.5i
$(NCARGLIB) $(NCARGGKSLIB) $(NCARGLOCLIB) $(NCARGCLIB)
.IP \fICNCARGLIBS\fP 1.5i
$(CNCARGLIB) $(CNCARGGKSLIB)
.IP \fIHLULIBS\fP 1.5i
$(HLULIB) $(HLUUTILLIB)
.LP
There are also a full set of \fBdependent\fP library symbols to go along with
the above symbols.  These \fBmake\fP symbols indicate the full path name
of the library they represent.  This is useful for putting the libraries on
the dependency list of a link command. (See the \fBFortranProgram\fP and
\fBCProgram\fP rules in the \fBCOMPILE/LINK RULES\fP section.)
.LP
\fIDEPNCARGLOCLIB\fP
.br
\fIDEPNCARGCLIB\fP
.br
\fIDEPNCARGLIB\fP
.br
\fIDEPCNCARGLIB\fP
.br
\fIDEPNCARGGKSLIB\fP
.br
\fIDEPCNCARGGKSLIB\fP
.br
\fIDEPCGMLIB\fP
.br
\fIDEPNCARGRASLIB\fP
.br
\fIDEPHLULIB\fP
.br
\fIDEPHLUUTILLIB\fP
.br
\fIDEPCTRANSLIB\fP
.br
\fIDEPICTRANSLIB\fP
.br
\fIDEPICTRANS_LIB\fP
.br
\fIDEPNCARGLIBS\fP
.br
\fIDEPCNCARGLIBS\fP
.br
\fIDEPHLULIBS\fP
.SH "COMPILE/LINK RULES"
.B ymake
has some basic rules that are used to compile executables.
.B ymake
uses three \fBmake\fP symbols to define the libraries to link with the object
code in the current directory to create executables.  These three symbols
are:
.IP \fIPROG_LIBS\fP 1.5i
This symbol defines the libraries that are part of the current directory
hierarchy.  These libraries are linked in \fBstatically\fP and they come
before the "\-L" flags on the link line.
.IP \fIEXTRA_LIBS\fP 1.5i
This symbol defines the libraries on the system that are not part of the
current directory hierarchy, but that may not exist on all systems.  These
libraries must also be linked \fBstatically\fP but they come after the
"\-L" flags on the link line.
.IP \fISYS_LIBS\fP 1.5i
This symbol defines the system libraries that need to be linked into the
executable.  These libraries should be standard libraries on the system.
They should be linked in \fBdynamically\fP so the executable has a better
chance of running on multiple versions of the OS.
.LP
These \fBmake\fP symbols are used with the following rules to create
an executable.  \fIprogram\fP indicates the name of the executable to
create. \fIobjects\fP indicates the object files that need to be linked
to create the executable.  \fIdeplibs\fP indicate the libraries that the
executable is dependent upon.
.IP \fBFortranProgram\fP(\fIprogram\fP,\fIobjects\fP,\fIdeplibs\fP) 1.5i
This rule creates a program by linking the listed objects with the
libraries indicated by setting the $(PROG_LIBS), $(EXTRA_LIBS) and
$(SYS_LIBS) make symbols. This rule also puts the install rule in.
It installs the executable into the \fIBIN_PATH\fP defined in the \fISite\fP
file.  The deplibs indicate a full
path name to the libraries used in this link that should be put on the
dependency line of the link rule.  If the DEP[...] Library \fBmake\fP
symbols are used \fBymake\fP will determine the path.
.IP \fBFortranTarget\fP(\fIprogram\fP,\fIobjects\fP) 1.5i
This rule is essentially identical to \fBFortranProgram\fP except that it
doesn't keep track of the dependent libraries, so it doesn't re-link
if the libraries are re-compiled.
.IP \fBFNotInstalledTarget\fP(\fIprogram\fP,\fIobjects\fP) 1.5i
This rule is essentially identical to \fBFortranTarget\fP except that it
doesn't put the install rule in.  It is intended to be used to create
programs that are only used within the distribution or are installed
into a different directory than the default \fIBIN_PATH\fP.
.IP \fBCProgram\fP(\fIprogram\fP,\fIobjects\fP,\fIdeplibs\fP) 1.5i
This rule is the same as \fBFortranProgram\fP except
that it uses the C Compiler
to link instead of the Fortran Compiler as the \fBFortranProgram\fP rule does.
.IP \fBCTarget\fP(\fIprogram\fP,\fIobjects\fP) 1.5i
This rule is the same as \fBFortranTarget\fP except
that it uses the C Compiler
to link instead of the Fortran Compiler as the \fBFortranTarget\fP rule does.
.IP \fBCNotInstalledTarget\fP(\fIprogram\fP,\fIobjects\fP) 1.5i
This rule is the same as the \fBFNotInstalledTarget\fP except
that it uses the C Compiler
to link instead of the Fortran Compiler as the \fBFNotInstalledTarget\fP rule
does.
.SH "MANAGING SUBDIRECTORIES"
.B ymake
manages all subdirectory handling itself.  It just needs to be told that the
given directory has subdirectories, and what those subdirectories are.  To
do that, you use the
.I #define IHaveSubdirs
.B cpp
directive and set the \fBmake\fP symbol \fISUBDIRS\fP to the list of
subdirectories in the \fIyMakefile\fP.
.SH "ENVIRONMENT VARIABLES"
The following environment variables may be set.
.TP 5
.B YMAKE_DEV_FILE
If defined, this should be a valid file including \fBmake\fP symbol definitions
to override the default ones.  This Environment variable is only used
if \fBymake\fP is being used from the bin directory, it will not effect a full
NCAR Graphics distribution build.
.TP 5
.B NCARG_ROOT
This is used by \fBymake\fP to find it's config directory if \fBymake\fP is
being used from the system's bin directory.
.SH "SEE ALSO"
make(1),ncargpath(1)
.SH BUGS
.B ymake
isn't particularly easy to use.
.SH COPYRIGHT
Copyright 1987, 1988, 1989, 1991, 1993 University Corporation for Atmospheric
Research
.br
All Rights Reserved
